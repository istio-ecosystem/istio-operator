// Copyright 2019 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto3';

package istio.io.operator.pkg.apis.istio.v1alpha2.gotoproto;

// Package-wide variables from generator "generated".
option go_package = "gotoproto";

// ArchConfig is described in istio.io documentation.
message ArchConfig {
  // Sets pod scheduling weight for amd64 arch
  uint32 amd64 = 1;

  // Sets pod scheduling weight for ppc64le arch.
  uint32 ppc64le = 2;

  // Sets pod scheduling weight for s390x arch.
  uint32 s390x = 3;
}

// DefaultPodDisruptionBudgetConfig is described in istio.io documentation.
message DefaultPodDisruptionBudgetConfig {
  // k8s PodDisruptionBudget settings.
  bool enabled = 1;
}

// DefaultResourcesConfig is described in istio.io documentation.
message DefaultResourcesConfig {
  // k8s resources settings.
  ResourcesRequestsConfig requests = 1;
}

// EnvoyMetricsConfig is described in istio.io documentation.
message EnvoyMetricsConfig {
  // Enables the Envoy Metrics Service.
  bool enabled = 1;

  // Sets the destination Envoy Metrics Service address in Envoy.
  string host = 2;

  // Sets the destination Envoy Metrics Service port in Envoy.
  int32 port = 3;
}

message GlobalConfig {
  ArchConfig arch = 30;

  // Configuration validation component namespace
  string configNamespace = 1;

  // Enables server-side validation of configuration.
  bool configValidation = 2;

  // Enables MTLS for control plane.
  bool controlPlaneSecurityEnabled = 3;

  // K8s NodeSelector
  map<string, string> defaultNodeSelector = 31;

  // k8s PodDisruptionBudget settings.
  DefaultPodDisruptionBudgetConfig defaultPodDisruptionBudget = 4;

  // Selects whether policy enforcement is installed.
  bool disablePolicyChecks = 5;

  DefaultResourcesConfig defaultResources = 6;

  // Enable helm test
  bool enableHelmTest = 7;

  // Enables tracing.
  bool enableTracing = 8;

  // Root for docker image paths.
  string hub = 9;

  // Default namespace.
  string istioNamespace = 10;

  map<string, string> localityLbSetting = 32;

  KubernetesIngressConfig k8sIngress = 11;

  GlobalLoggingConfig logging = 12;

  MeshExpansionConfig meshExpansion = 13;

  map<string, string> meshNetworks = 33;

  // Monitor port number for all control plane components.
  uint32 monitoringPort = 14;

  MTLSConfig mtls = 15;

  MultiClusterConfig multiCluster = 16;

  // Restricts the applications namespace that the controller manages.
  bool oneNamespace = 17;

  OutboundTrafficPolicyConfig outboundTrafficPolicy = 18;

  // If set, allows traffic in cases when the mixer policy service cannot be reached.
  bool policyCheckFailOpen = 19;

  // Namespace of policy components
  string policyNamespace = 20;

  // k8s priorityClassName.
  string priorityClassName = 21;

  ProxyConfig proxy = 22;

  ProxyInitConfig proxy_init = 23;

  SDSConfig sds = 24;

  // Version tag for docker images.
  string tag = 25;

  // Namespace of telemetry components
  string telemetryNamespace = 26;

  // test
  TracerConfig tracer = 27;

  // Specifies the trust domain that corresponds to the root cert of CA.
  string trustDomain = 28;

  // Selects use of Mesh Configuration Protocol to configure Pilot.
  bool useMCP = 29;
}

// GlobalLoggingConfig is described in istio.io documentation.
message GlobalLoggingConfig {
  string level = 1;
}

// KubernetesIngressConfig represents the configuration for Kubernetes Ingress.
message KubernetesIngressConfig {
  // Enables gateway for legacy k8s Ingress.
  bool enabled = 1;

  // Enables gateway for legacy k8s Ingress.
  bool enableHttps = 2;

  // Sets the gateway name for legacy k8s Ingress.
  string gatewayName = 3;
}

// MTLSConfig is described in istio.io documentation.
message MTLSConfig {
  // Enables MTLS for service to service traffic.
  bool enabled = 1;
}

// MeshExpansionConfig is described in istio.io documentation.
message MeshExpansionConfig {
  // Exposes Pilot and Citadel mTLS on the ingress gateway.
  bool enabled = 1;

  // Exposes Pilot and Citadel mTLS and the plain text Pilot ports on an internal gateway.
  bool useILB = 2;
}

// MultiClusterConfig is described in istio.io documentation.
message MultiClusterConfig {
  // Enables the connection between two kubernetes clusters via their respective ingressgateway services. Use if the pods in each cluster cannot directly talk to one another.
  bool enabled = 1;
}

// OutboundTrafficPolicyConfig is described in istio.io documentation.
message OutboundTrafficPolicyConfig {
  // Specifies the sidecar's default behavior when handling outbound traffic from the application.
  string mode = 1;
}

// PilotIngressConfig is described in istio.io documentation.
message PilotIngressConfig {
  string ingressService = 1;

  string ingressControllerMode = 2;

  string ingressClass = 3;
}

// PilotPolicyConfig is described in istio.io documentation.
message PilotPolicyConfig {
  bool enabled = 1;
}

// PilotTelemetryConfig is described in istio.io documentation.
message PilotTelemetryConfig {
  bool enabled = 1;
}

// ProxyConfig specifies how proxies are configured within Istio.
message ProxyConfig {
  // Specifies the path to write the sidecar access log file.
  string accessLogFile = 1;

  // Configures how and what fields are displayed in sidecar access log.
  string accessLogFormat = 2;

  string accessLogEncoding = 3;

  string autoInject = 4;

  // Domain for the cluster - defaults to .cluster.local, but k8s allows this to be customized, can be prod.example.com
  string clusterDomain = 5;

  string componentLogLevel = 6;

  // Controls number of proxy worker threads.
  uint32 concurrency = 7;

  // Configures the DNS refresh rate for Envoy cluster of type STRICT_DNS.
  string dnsRefreshRate = 8;

  // Enables core dumps for newly injected sidecars.
  bool enableCoreDump = 9;

  EnvoyMetricsConfig envoyMetricsService = 10;

  EnvoyMetricsConfig envoyStatsd = 11;

  // Specifies the Istio ingress ports not to capture.
  string excludeInboundPorts = 12;

  // Lists the excluded IP ranges of Istio egress traffic that the sidecar captures.
  string excludeIPRanges = 13;

  // Image name or path for the proxy.
  string image = 14;

  // Specifies the Istio ingress ports to capture.
  string includeInboundPorts = 15;

  // Lists the IP ranges of Istio egress traffic that the sidecar captures.
  string includeIPRanges = 16;

  string kubevirtInterfaces = 17;

  string logLevel = 18;

  bool privileged = 19;

  // Sets the initial delay for readiness probes in seconds.
  uint32 readinessInitialDelaySeconds = 20;

  // Sets the interval between readiness probes in seconds.
  uint32 readinessPeriodSeconds = 21;

  // Sets the number of successive failed probes before indicating readiness failure.
  uint32 readinessFailureThreshold = 22;

  // Default port used for the Pilot agent's health checks.
  uint32 statusPort = 23;

  ResourcesConfig resources = 24;

  // Specifies which tracer to use.
  string tracer = 25;
}

// ProxyInitConfig is described in istio.io documentation.
message ProxyInitConfig {
  string image = 1;
}

// ResourcesConfig is described in istio.io documentation.
message ResourcesConfig {
  ResourcesRequestsConfig requests = 1;

  ResourcesRequestsConfig limits = 2;
}

// ResourcesRequestsConfig is described in istio.io documentation.
message ResourcesRequestsConfig {
  string cpu = 1;

  string memory = 2;
}

// SDSConfig is described in istio.io documentation.
message SDSConfig {
  bool enabled = 1;

  // Specifies the Unix Domain Socket through which Envoy communicates with NodeAgent SDS to get key/cert for mTLS.
  string udsPath = 2;

  // Enables SDS use of k8s sa normal JWT to request for certificates.
  bool useNormalJwt = 3;

  // Enables SDS use of trustworthy JWT to request for certificates.
  bool useTrustworthyJwt = 4;
}

// TracerConfig is described in istio.io documentation.
message TracerConfig {
  TracerDatadogConfig datadog = 1;

  TracerLightStepConfig lightstep = 2;

  TracerZipkinConfig zipkin = 3;
}

// TracerDatadogConfig is described in istio.io documentation.
message TracerDatadogConfig {
  string address = 1;
}

// TracerLightStepConfig is described in istio.io documentation.
message TracerLightStepConfig {
  // Sets the lightstep satellite pool address.
  string address = 1;

  // Sets the lightstep access token.
  string accessToken = 2;

  // Sets path to the file containing the cacert to use when verifying TLS.
  string cacertPath = 3;

  // Enables lightstep secure connection.
  bool secure = 4;
}

// TracerZipkinConfig is described in istio.io documentation.
message TracerZipkinConfig {
  // Specifies address in host:port format for reporting trace data in zipkin format.
  string address = 1;
}

message Values {
  GlobalConfig global = 1;
}

