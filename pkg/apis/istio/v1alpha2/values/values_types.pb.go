// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apis/istio/v1alpha2/values/values_types.proto

package v1alpha2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	v1 "k8s.io/api/core/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Throttling behavior for mixer.
type LoadSheddingConfigMode int32

const (
	// Removes throttling behavior for mixer.
	LoadSheddingConfig_DISABLED LoadSheddingConfigMode = 0
	// Enables an advisory mode for throttling behavior for mixer.
	LoadSheddingConfig_LOG_ONLY LoadSheddingConfigMode = 1
	// Turn on throttling behavior for mixer.
	LoadSheddingConfig_ENFORCE LoadSheddingConfigMode = 2
)

var LoadSheddingConfigMode_name = map[int32]string{
	0: "DISABLED",
	1: "LOG_ONLY",
	2: "ENFORCE",
}

var LoadSheddingConfigMode_value = map[string]int32{
	"DISABLED": 0,
	"LOG_ONLY": 1,
	"ENFORCE":  2,
}

func (x LoadSheddingConfigMode) String() string {
	return proto.EnumName(LoadSheddingConfigMode_name, int32(x))
}

func (LoadSheddingConfigMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{20, 0}
}

// Specifies the sidecar's default behavior when handling outbound traffic from the application.
type OutboundTrafficPolicyConfigMode int32

const (
	// Outbound traffic to unknown destinations will be allowed, in case there are no services or ServiceEntries for the destination port
	OutboundTrafficPolicyConfig_ALLOW_ANY OutboundTrafficPolicyConfigMode = 0
	// Restrict outbound traffic to services defined in the service registry as well as those defined through ServiceEntries
	OutboundTrafficPolicyConfig_REGISTRY_ONLY OutboundTrafficPolicyConfigMode = 1
)

var OutboundTrafficPolicyConfigMode_name = map[int32]string{
	0: "ALLOW_ANY",
	1: "REGISTRY_ONLY",
}

var OutboundTrafficPolicyConfigMode_value = map[string]int32{
	"ALLOW_ANY":     0,
	"REGISTRY_ONLY": 1,
}

func (x OutboundTrafficPolicyConfigMode) String() string {
	return proto.EnumName(OutboundTrafficPolicyConfigMode_name, int32(x))
}

func (OutboundTrafficPolicyConfigMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{29, 0}
}

// Mode for the ingress controller.
type PilotIngressConfigIngressControllerMode int32

const (
	// Selects all Ingress resources, with or without Istio annotation.
	PilotIngressConfig_DEFAULT PilotIngressConfigIngressControllerMode = 0
	// Selects only resources with istio annotation.
	PilotIngressConfig_STRICT PilotIngressConfigIngressControllerMode = 1
	// No ingress or sync.
	PilotIngressConfig_OFF PilotIngressConfigIngressControllerMode = 2
)

var PilotIngressConfigIngressControllerMode_name = map[int32]string{
	0: "DEFAULT",
	1: "STRICT",
	2: "OFF",
}

var PilotIngressConfigIngressControllerMode_value = map[string]int32{
	"DEFAULT": 0,
	"STRICT":  1,
	"OFF":     2,
}

func (x PilotIngressConfigIngressControllerMode) String() string {
	return proto.EnumName(PilotIngressConfigIngressControllerMode_name, int32(x))
}

func (PilotIngressConfigIngressControllerMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{31, 0}
}

// Configures the access log for sidecar to JSON or TEXT
type ProxyConfigAccessLogEncoding int32

const (
	ProxyConfig_JSON ProxyConfigAccessLogEncoding = 0
	ProxyConfig_TEXT ProxyConfigAccessLogEncoding = 1
)

var ProxyConfigAccessLogEncoding_name = map[int32]string{
	0: "JSON",
	1: "TEXT",
}

var ProxyConfigAccessLogEncoding_value = map[string]int32{
	"JSON": 0,
	"TEXT": 1,
}

func (x ProxyConfigAccessLogEncoding) String() string {
	return proto.EnumName(ProxyConfigAccessLogEncoding_name, int32(x))
}

func (ProxyConfigAccessLogEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{40, 0}
}

// Controls whether automatic sidecar injection is enabled.
type ProxyConfigAutoInject int32

const (
	ProxyConfig_ENABLED  ProxyConfigAutoInject = 0
	ProxyConfig_DISABLED ProxyConfigAutoInject = 1
)

var ProxyConfigAutoInject_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
}

var ProxyConfigAutoInject_value = map[string]int32{
	"ENABLED":  0,
	"DISABLED": 1,
}

func (x ProxyConfigAutoInject) String() string {
	return proto.EnumName(ProxyConfigAutoInject_name, int32(x))
}

func (ProxyConfigAutoInject) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{40, 1}
}

// Specifies which tracer to use.
type ProxyConfigTracer int32

const (
	ProxyConfig_ZIPKIN    ProxyConfigTracer = 0
	ProxyConfig_LIGHTSTEP ProxyConfigTracer = 1
	ProxyConfig_DATADOG   ProxyConfigTracer = 2
)

var ProxyConfigTracer_name = map[int32]string{
	0: "ZIPKIN",
	1: "LIGHTSTEP",
	2: "DATADOG",
}

var ProxyConfigTracer_value = map[string]int32{
	"ZIPKIN":    0,
	"LIGHTSTEP": 1,
	"DATADOG":   2,
}

func (x ProxyConfigTracer) String() string {
	return proto.EnumName(ProxyConfigTracer_name, int32(x))
}

func (ProxyConfigTracer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{40, 2}
}

// Configuration for the addon ingress.
type AddonIngressConfig struct {
	// Controls whether addon ingress is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Hosts                []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddonIngressConfig) Reset()         { *m = AddonIngressConfig{} }
func (m *AddonIngressConfig) String() string { return proto.CompactTextString(m) }
func (*AddonIngressConfig) ProtoMessage()    {}
func (*AddonIngressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{0}
}

func (m *AddonIngressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddonIngressConfig.Unmarshal(m, b)
}
func (m *AddonIngressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddonIngressConfig.Marshal(b, m, deterministic)
}
func (m *AddonIngressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonIngressConfig.Merge(m, src)
}
func (m *AddonIngressConfig) XXX_Size() int {
	return xxx_messageInfo_AddonIngressConfig.Size(m)
}
func (m *AddonIngressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonIngressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AddonIngressConfig proto.InternalMessageInfo

func (m *AddonIngressConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AddonIngressConfig) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// ArchConfig specifies the pod scheduling target architecture(amd64, ppc64le, s390x) for all the Istio control plane components.
type ArchConfig struct {
	// Sets pod scheduling weight for amd64 arch
	Amd64 uint32 `protobuf:"varint,1,opt,name=amd64,proto3" json:"amd64,omitempty"`
	// Sets pod scheduling weight for ppc64le arch.
	Ppc64Le uint32 `protobuf:"varint,2,opt,name=ppc64le,proto3" json:"ppc64le,omitempty"`
	// Sets pod scheduling weight for s390x arch.
	S390X                uint32   `protobuf:"varint,3,opt,name=s390x,proto3" json:"s390x,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchConfig) Reset()         { *m = ArchConfig{} }
func (m *ArchConfig) String() string { return proto.CompactTextString(m) }
func (*ArchConfig) ProtoMessage()    {}
func (*ArchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{1}
}

func (m *ArchConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchConfig.Unmarshal(m, b)
}
func (m *ArchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchConfig.Marshal(b, m, deterministic)
}
func (m *ArchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchConfig.Merge(m, src)
}
func (m *ArchConfig) XXX_Size() int {
	return xxx_messageInfo_ArchConfig.Size(m)
}
func (m *ArchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ArchConfig proto.InternalMessageInfo

func (m *ArchConfig) GetAmd64() uint32 {
	if m != nil {
		return m.Amd64
	}
	return 0
}

func (m *ArchConfig) GetPpc64Le() uint32 {
	if m != nil {
		return m.Ppc64Le
	}
	return 0
}

func (m *ArchConfig) GetS390X() uint32 {
	if m != nil {
		return m.S390X
	}
	return 0
}

// Configuration for CNI.
type CNIConfig struct {
	// Controls whether CNI is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNIConfig) Reset()         { *m = CNIConfig{} }
func (m *CNIConfig) String() string { return proto.CompactTextString(m) }
func (*CNIConfig) ProtoMessage()    {}
func (*CNIConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{2}
}

func (m *CNIConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNIConfig.Unmarshal(m, b)
}
func (m *CNIConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNIConfig.Marshal(b, m, deterministic)
}
func (m *CNIConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIConfig.Merge(m, src)
}
func (m *CNIConfig) XXX_Size() int {
	return xxx_messageInfo_CNIConfig.Size(m)
}
func (m *CNIConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CNIConfig proto.InternalMessageInfo

func (m *CNIConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for CPU target utilization for HorizontalPodAutoscaler target.
type CPUTargetUtilizationConfig struct {
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	TargetAverageUtilization int32    `protobuf:"varint,1,opt,name=targetAverageUtilization,proto3" json:"targetAverageUtilization,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CPUTargetUtilizationConfig) Reset()         { *m = CPUTargetUtilizationConfig{} }
func (m *CPUTargetUtilizationConfig) String() string { return proto.CompactTextString(m) }
func (*CPUTargetUtilizationConfig) ProtoMessage()    {}
func (*CPUTargetUtilizationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{3}
}

func (m *CPUTargetUtilizationConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPUTargetUtilizationConfig.Unmarshal(m, b)
}
func (m *CPUTargetUtilizationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPUTargetUtilizationConfig.Marshal(b, m, deterministic)
}
func (m *CPUTargetUtilizationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUTargetUtilizationConfig.Merge(m, src)
}
func (m *CPUTargetUtilizationConfig) XXX_Size() int {
	return xxx_messageInfo_CPUTargetUtilizationConfig.Size(m)
}
func (m *CPUTargetUtilizationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUTargetUtilizationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CPUTargetUtilizationConfig proto.InternalMessageInfo

func (m *CPUTargetUtilizationConfig) GetTargetAverageUtilization() int32 {
	if m != nil {
		return m.TargetAverageUtilization
	}
	return 0
}

// Configuration for CertManager.
type CertManagerConfig struct {
	// Controls whether CertManager is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image hub for the CertManager Deployment.
	Hub string `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for the CertManager Deployment.
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *v1.ResourceRequirements `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CertManagerConfig) Reset()         { *m = CertManagerConfig{} }
func (m *CertManagerConfig) String() string { return proto.CompactTextString(m) }
func (*CertManagerConfig) ProtoMessage()    {}
func (*CertManagerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{4}
}

func (m *CertManagerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertManagerConfig.Unmarshal(m, b)
}
func (m *CertManagerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertManagerConfig.Marshal(b, m, deterministic)
}
func (m *CertManagerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertManagerConfig.Merge(m, src)
}
func (m *CertManagerConfig) XXX_Size() int {
	return xxx_messageInfo_CertManagerConfig.Size(m)
}
func (m *CertManagerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CertManagerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CertManagerConfig proto.InternalMessageInfo

func (m *CertManagerConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *CertManagerConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *CertManagerConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CertManagerConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *CertManagerConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Configuration for Core DNS.
type CoreDNSConfig struct {
	// Controls whether CoreDNS is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image for Core DNS.
	CoreDNSImage       string `protobuf:"bytes,2,opt,name=coreDNSImage,proto3" json:"coreDNSImage,omitempty"`
	CoreDNSPluginImage string `protobuf:"bytes,3,opt,name=coreDNSPluginImage,proto3" json:"coreDNSPluginImage,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// Number of replicas for Core DNS.
	ReplicaCount         uint32   `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoreDNSConfig) Reset()         { *m = CoreDNSConfig{} }
func (m *CoreDNSConfig) String() string { return proto.CompactTextString(m) }
func (*CoreDNSConfig) ProtoMessage()    {}
func (*CoreDNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{5}
}

func (m *CoreDNSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoreDNSConfig.Unmarshal(m, b)
}
func (m *CoreDNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoreDNSConfig.Marshal(b, m, deterministic)
}
func (m *CoreDNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoreDNSConfig.Merge(m, src)
}
func (m *CoreDNSConfig) XXX_Size() int {
	return xxx_messageInfo_CoreDNSConfig.Size(m)
}
func (m *CoreDNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CoreDNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CoreDNSConfig proto.InternalMessageInfo

func (m *CoreDNSConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *CoreDNSConfig) GetCoreDNSImage() string {
	if m != nil {
		return m.CoreDNSImage
	}
	return ""
}

func (m *CoreDNSConfig) GetCoreDNSPluginImage() string {
	if m != nil {
		return m.CoreDNSPluginImage
	}
	return ""
}

func (m *CoreDNSConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *CoreDNSConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

// DefaultPodDisruptionBudgetConfig specifies the default pod disruption budget configuration.
//
// See https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
type DefaultPodDisruptionBudgetConfig struct {
	// Controls whether a PodDisruptionBudget with a default minAvailable value of 1 is created for each deployment.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefaultPodDisruptionBudgetConfig) Reset()         { *m = DefaultPodDisruptionBudgetConfig{} }
func (m *DefaultPodDisruptionBudgetConfig) String() string { return proto.CompactTextString(m) }
func (*DefaultPodDisruptionBudgetConfig) ProtoMessage()    {}
func (*DefaultPodDisruptionBudgetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{6}
}

func (m *DefaultPodDisruptionBudgetConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Unmarshal(m, b)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Marshal(b, m, deterministic)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Merge(m, src)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_Size() int {
	return xxx_messageInfo_DefaultPodDisruptionBudgetConfig.Size(m)
}
func (m *DefaultPodDisruptionBudgetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPodDisruptionBudgetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPodDisruptionBudgetConfig proto.InternalMessageInfo

func (m *DefaultPodDisruptionBudgetConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// DefaultResourcesConfig specifies the default k8s resources settings for all Istio control plane components.
type DefaultResourcesConfig struct {
	// k8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Requests             *ResourcesRequestsConfig `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DefaultResourcesConfig) Reset()         { *m = DefaultResourcesConfig{} }
func (m *DefaultResourcesConfig) String() string { return proto.CompactTextString(m) }
func (*DefaultResourcesConfig) ProtoMessage()    {}
func (*DefaultResourcesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{7}
}

func (m *DefaultResourcesConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultResourcesConfig.Unmarshal(m, b)
}
func (m *DefaultResourcesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultResourcesConfig.Marshal(b, m, deterministic)
}
func (m *DefaultResourcesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultResourcesConfig.Merge(m, src)
}
func (m *DefaultResourcesConfig) XXX_Size() int {
	return xxx_messageInfo_DefaultResourcesConfig.Size(m)
}
func (m *DefaultResourcesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultResourcesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultResourcesConfig proto.InternalMessageInfo

func (m *DefaultResourcesConfig) GetRequests() *ResourcesRequestsConfig {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Configuration for an egress gateway.
type EgressGatewayConfig struct {
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Controls whether an egress gateway is enabled.
	Enabled bool `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env    map[string]string    `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels *GatewayLabelsConfig `protobuf:"bytes,9,opt,name=labels,proto3" json:"labels,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations map[string]interface{} `protobuf:"bytes,11,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"`
	// Pod anti-affinity label selector.
	//
	// Specify the pod anti-affinity that allows you to constrain which nodes
	// your pod is eligible to be scheduled based on labels on pods that are
	// already running on the node rather than based on labels on nodes.
	// There are currently two types of anti-affinity:
	//    "requiredDuringSchedulingIgnoredDuringExecution"
	//    "preferredDuringSchedulingIgnoredDuringExecution"
	// which denote “hard” vs. “soft” requirements, you can define your values
	// in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
	// correspondingly.
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
	//
	// Examples:
	// podAntiAffinityLabelSelector:
	//  - key: security
	//    operator: In
	//    values: S1,S2
	//    topologyKey: "kubernetes.io/hostname"
	//  This pod anti-affinity rule says that the pod requires not to be scheduled
	//  onto a node if that node is already running a pod with label having key
	//  “security” and value “S1”.
	PodAntiAffinityLabelSelector []map[string]interface{} `protobuf:"bytes,12,opt,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See PodAntiAffinityLabelSelector.
	PodAntiAffinityTermLabelSelector []map[string]interface{} `protobuf:"bytes,13,opt,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Ports Configuration for the egress gateway service.
	Ports []*PortsConfig `protobuf:"bytes,14,rep,name=ports,proto3" json:"ports,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *v1.ResourceRequirements `protobuf:"bytes,15,opt,name=resources,proto3" json:"resources,omitempty"`
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,16,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations map[string]interface{} `protobuf:"bytes,17,opt,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	// Enables cross-cluster access using SNI matching.
	Zvpn                 *ZeroVPNConfig `protobuf:"bytes,19,opt,name=zvpn,proto3" json:"zvpn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *EgressGatewayConfig) Reset()         { *m = EgressGatewayConfig{} }
func (m *EgressGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*EgressGatewayConfig) ProtoMessage()    {}
func (*EgressGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{8}
}

func (m *EgressGatewayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EgressGatewayConfig.Unmarshal(m, b)
}
func (m *EgressGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EgressGatewayConfig.Marshal(b, m, deterministic)
}
func (m *EgressGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EgressGatewayConfig.Merge(m, src)
}
func (m *EgressGatewayConfig) XXX_Size() int {
	return xxx_messageInfo_EgressGatewayConfig.Size(m)
}
func (m *EgressGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EgressGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EgressGatewayConfig proto.InternalMessageInfo

func (m *EgressGatewayConfig) GetAutoscaleEnabled() bool {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return false
}

func (m *EgressGatewayConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *EgressGatewayConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *EgressGatewayConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *EgressGatewayConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EgressGatewayConfig) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *EgressGatewayConfig) GetLabels() *GatewayLabelsConfig {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *EgressGatewayConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *EgressGatewayConfig) GetPodAnnotations() map[string]interface{} {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *EgressGatewayConfig) GetPodAntiAffinityLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

func (m *EgressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *EgressGatewayConfig) GetPorts() []*PortsConfig {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *EgressGatewayConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *EgressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if m != nil {
		return m.SecretVolumes
	}
	return nil
}

func (m *EgressGatewayConfig) GetServiceAnnotations() map[string]interface{} {
	if m != nil {
		return m.ServiceAnnotations
	}
	return nil
}

func (m *EgressGatewayConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EgressGatewayConfig) GetZvpn() *ZeroVPNConfig {
	if m != nil {
		return m.Zvpn
	}
	return nil
}

// EnvoyMetricsConfig is a set of configuration options for Envoy metrics.
type EnvoyMetricsConfig struct {
	// Enables the Envoy Metrics Service.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sets the destination Envoy Metrics Service address in Envoy.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Sets the destination Envoy Metrics Service port in Envoy.
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvoyMetricsConfig) Reset()         { *m = EnvoyMetricsConfig{} }
func (m *EnvoyMetricsConfig) String() string { return proto.CompactTextString(m) }
func (*EnvoyMetricsConfig) ProtoMessage()    {}
func (*EnvoyMetricsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{9}
}

func (m *EnvoyMetricsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvoyMetricsConfig.Unmarshal(m, b)
}
func (m *EnvoyMetricsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvoyMetricsConfig.Marshal(b, m, deterministic)
}
func (m *EnvoyMetricsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvoyMetricsConfig.Merge(m, src)
}
func (m *EnvoyMetricsConfig) XXX_Size() int {
	return xxx_messageInfo_EnvoyMetricsConfig.Size(m)
}
func (m *EnvoyMetricsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvoyMetricsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EnvoyMetricsConfig proto.InternalMessageInfo

func (m *EnvoyMetricsConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EnvoyMetricsConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EnvoyMetricsConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// GalleyConfig is a set of Configuration for Galley.
type GalleyConfig struct {
	// Controls whether Galley is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image name used for Galley.
	//
	// This can be set either to image name if hub is also set in global.hub, or can be set to the full hub:name string.
	//
	// Examples: custom-galley, docker.io/someuser:custom-galley
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// TODO: Galley appears to use the mesh config - need to find which fields are used and need to be configured (https://github.com/istio/istio/issues/15865).
	Mesh map[string]string `protobuf:"bytes,3,rep,name=mesh,proto3" json:"mesh,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []map[string]interface{} `protobuf:"bytes,4,opt,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []map[string]interface{} `protobuf:"bytes,5,opt,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Number of replicas in the Galley Deployment.
	ReplicaCount uint32 `protobuf:"varint,6,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *v1.ResourceRequirements `protobuf:"bytes,7,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GalleyConfig) Reset()         { *m = GalleyConfig{} }
func (m *GalleyConfig) String() string { return proto.CompactTextString(m) }
func (*GalleyConfig) ProtoMessage()    {}
func (*GalleyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{10}
}

func (m *GalleyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GalleyConfig.Unmarshal(m, b)
}
func (m *GalleyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GalleyConfig.Marshal(b, m, deterministic)
}
func (m *GalleyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GalleyConfig.Merge(m, src)
}
func (m *GalleyConfig) XXX_Size() int {
	return xxx_messageInfo_GalleyConfig.Size(m)
}
func (m *GalleyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GalleyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GalleyConfig proto.InternalMessageInfo

func (m *GalleyConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GalleyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *GalleyConfig) GetMesh() map[string]string {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *GalleyConfig) GetPodAntiAffinityLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

func (m *GalleyConfig) GetPodAntiAffinityTermLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *GalleyConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *GalleyConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

// GatewayLabelsConfig is a set of Configuration for gateway labels.
type GatewayLabelsConfig struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Istio                string   `protobuf:"bytes,2,opt,name=istio,proto3" json:"istio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayLabelsConfig) Reset()         { *m = GatewayLabelsConfig{} }
func (m *GatewayLabelsConfig) String() string { return proto.CompactTextString(m) }
func (*GatewayLabelsConfig) ProtoMessage()    {}
func (*GatewayLabelsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{11}
}

func (m *GatewayLabelsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayLabelsConfig.Unmarshal(m, b)
}
func (m *GatewayLabelsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayLabelsConfig.Marshal(b, m, deterministic)
}
func (m *GatewayLabelsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLabelsConfig.Merge(m, src)
}
func (m *GatewayLabelsConfig) XXX_Size() int {
	return xxx_messageInfo_GatewayLabelsConfig.Size(m)
}
func (m *GatewayLabelsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLabelsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLabelsConfig proto.InternalMessageInfo

func (m *GatewayLabelsConfig) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *GatewayLabelsConfig) GetIstio() string {
	if m != nil {
		return m.Istio
	}
	return ""
}

// Configuration for gateways.
type GatewaysConfig struct {
	// Configuration for an egress gateway.
	IstioEgressgateway *EgressGatewayConfig `protobuf:"bytes,1,opt,name=istioEgressgateway,proto3" json:"istioEgressgateway,omitempty"`
	// Controls whether any gateways are enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Configuration for an ingress gateway.
	IstioIngressgateway  *IngressGatewayConfig `protobuf:"bytes,4,opt,name=istioIngressgateway,proto3" json:"istioIngressgateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GatewaysConfig) Reset()         { *m = GatewaysConfig{} }
func (m *GatewaysConfig) String() string { return proto.CompactTextString(m) }
func (*GatewaysConfig) ProtoMessage()    {}
func (*GatewaysConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{12}
}

func (m *GatewaysConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewaysConfig.Unmarshal(m, b)
}
func (m *GatewaysConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewaysConfig.Marshal(b, m, deterministic)
}
func (m *GatewaysConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaysConfig.Merge(m, src)
}
func (m *GatewaysConfig) XXX_Size() int {
	return xxx_messageInfo_GatewaysConfig.Size(m)
}
func (m *GatewaysConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaysConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaysConfig proto.InternalMessageInfo

func (m *GatewaysConfig) GetIstioEgressgateway() *EgressGatewayConfig {
	if m != nil {
		return m.IstioEgressgateway
	}
	return nil
}

func (m *GatewaysConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GatewaysConfig) GetIstioIngressgateway() *IngressGatewayConfig {
	if m != nil {
		return m.IstioIngressgateway
	}
	return nil
}

// Global Configuration for Istio components.
type GlobalConfig struct {
	// Specifies pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:
	//   0 - Never scheduled
	//   1 - Least preferred
	//   2 - No preference
	//   3 - Most preferred
	Arch *ArchConfig `protobuf:"bytes,1,opt,name=arch,proto3" json:"arch,omitempty"`
	// Specifies the namespace for the configuration and validation component.
	ConfigNamespace string `protobuf:"bytes,2,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
	// Controls whether the server-side validation is enabled.
	ConfigValidation bool `protobuf:"varint,3,opt,name=configValidation,proto3" json:"configValidation,omitempty"`
	// Controls whether the MTLS for communication between the control plane components is enabled.
	ControlPlaneSecurityEnabled bool `protobuf:"varint,4,opt,name=controlPlaneSecurityEnabled,proto3" json:"controlPlaneSecurityEnabled,omitempty"`
	// Default k8s node selector for all the Istio control plane components
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	DefaultNodeSelector map[string]interface{} `protobuf:"bytes,6,opt,name=defaultNodeSelector,proto3" json:"defaultNodeSelector,omitempty"`
	// Specifies the default pod disruption budget configuration.
	DefaultPodDisruptionBudget *DefaultPodDisruptionBudgetConfig `protobuf:"bytes,7,opt,name=defaultPodDisruptionBudget,proto3" json:"defaultPodDisruptionBudget,omitempty"`
	// Controls whether the policy enforcement is enabled.
	DisablePolicyChecks bool `protobuf:"varint,8,opt,name=disablePolicyChecks,proto3" json:"disablePolicyChecks,omitempty"`
	// Default k8s resources settings for all Istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	DefaultResources *DefaultResourcesConfig `protobuf:"bytes,9,opt,name=defaultResources,proto3" json:"defaultResources,omitempty"`
	// Controls whether the helm test templates are enabled.
	EnableHelmTest bool `protobuf:"varint,10,opt,name=enableHelmTest,proto3" json:"enableHelmTest,omitempty"`
	// Controls whether the distributed tracing for the applications is enabled.
	//
	// See https://opentracing.io/docs/overview/what-is-tracing/
	EnableTracing bool `protobuf:"varint,11,opt,name=enableTracing,proto3" json:"enableTracing,omitempty"`
	// Specifies the docker hub for Istio images.
	Hub string `protobuf:"bytes,12,opt,name=hub,proto3" json:"hub,omitempty"`
	// Specifies the image pull policy for the Istio images. one of Always, Never, IfNotPresent.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.
	//
	// More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy string `protobuf:"bytes,13,opt,name=imagePullPolicy,proto3" json:"imagePullPolicy,omitempty"`
	// Specifies the default namespace for the Istio control plane components.
	IstioNamespace string `protobuf:"bytes,14,opt,name=istioNamespace,proto3" json:"istioNamespace,omitempty"`
	// Specifies the global locality load balancing settings.
	// Locality-weighted load balancing allows administrators to control the distribution of traffic to
	// endpoints based on the localities of where the traffic originates and where it will terminate.
	// Please set either failover or distribute configuration but not both.
	//
	// localityLbSetting:
	//   distribute:
	//   - from: "us-central1/*"
	//     to:
	//       "us-central1/*": 80
	//       "us-central2/*": 20
	//
	// localityLbSetting:
	//   failover:
	//   - from: us-east
	//     to: eu-west
	//   - from: us-west
	//     to: us-east
	LocalityLbSetting map[string]string `protobuf:"bytes,15,rep,name=localityLbSetting,proto3" json:"localityLbSetting,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specifies the Configuration for the legacy kubernetes Ingress.
	K8SIngress *KubernetesIngressConfig `protobuf:"bytes,16,opt,name=k8sIngress,proto3" json:"k8sIngress,omitempty"`
	// Specifies the global logging level settings for the Istio control plane components.
	Logging *GlobalLoggingConfig `protobuf:"bytes,17,opt,name=logging,proto3" json:"logging,omitempty"`
	// Specifies the Configuration for Istio mesh expansion to bare metal.
	MeshExpansion *MeshExpansionConfig `protobuf:"bytes,18,opt,name=meshExpansion,proto3" json:"meshExpansion,omitempty"`
	// Configure the mesh networks to be used by the Split Horizon EDS.
	//
	// The following example defines two networks with different endpoints association methods.
	// For `network1` all endpoints that their IP belongs to the provided CIDR range will be
	// mapped to network1. The gateway for this network example is specified by its public IP
	// address and port.
	// The second network, `network2`, in this example is defined differently with all endpoints
	// retrieved through the specified Multi-Cluster registry being mapped to network2. The
	// gateway is also defined differently with the name of the gateway service on the remote
	// cluster. The public IP for the gateway will be determined from that remote service (only
	// LoadBalancer gateway service type is currently supported, for a NodePort type gateway service,
	// it still need to be configured manually).
	//
	// meshNetworks:
	//   network1:
	//     endpoints:
	//     - fromCidr: "192.168.0.1/24"
	//     gateways:
	//     - address: 1.1.1.1
	//       port: 80
	//   network2:
	//     endpoints:
	//     - fromRegistry: reg1
	//     gateways:
	//     - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local
	//       port: 443
	//
	MeshNetworks map[string]interface{} `protobuf:"bytes,19,opt,name=meshNetworks,proto3" json:"meshNetworks,omitempty"`
	// Specifies the monitor port number for all Istio control plane components.
	MonitoringPort uint32 `protobuf:"varint,20,opt,name=monitoringPort,proto3" json:"monitoringPort,omitempty"`
	// Specifies the MTLS settings for the applications that Istio manages.
	Mtls *MTLSConfig `protobuf:"bytes,21,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Specifies the Configuration for Istio mesh across multiple clusters through Istio gateways.
	MultiCluster *MultiClusterConfig `protobuf:"bytes,22,opt,name=multiCluster,proto3" json:"multiCluster,omitempty"`
	// Controls whether to restrict the applications namespace the controller manages;
	// If set it to false, the controller watches all namespaces.
	OneNamespace bool `protobuf:"varint,23,opt,name=oneNamespace,proto3" json:"oneNamespace,omitempty"`
	// Controls the default behavior of the sidecar for handling outbound traffic from the application.
	OutboundTrafficPolicy *OutboundTrafficPolicyConfig `protobuf:"bytes,24,opt,name=outboundTrafficPolicy,proto3" json:"outboundTrafficPolicy,omitempty"`
	// Controls whether to allow traffic in cases when the mixer policy service cannot be reached.
	PolicyCheckFailOpen bool `protobuf:"varint,25,opt,name=policyCheckFailOpen,proto3" json:"policyCheckFailOpen,omitempty"`
	// Specifies the namespace for the policy component.
	PolicyNamespace string `protobuf:"bytes,26,opt,name=policyNamespace,proto3" json:"policyNamespace,omitempty"`
	// Specifies the k8s priorityClassName for the istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
	PriorityClassName string `protobuf:"bytes,27,opt,name=priorityClassName,proto3" json:"priorityClassName,omitempty"`
	// Specifies how proxies are configured within Istio.
	Proxy *ProxyConfig `protobuf:"bytes,28,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// Specifies the Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
	ProxyInit *ProxyInitConfig `protobuf:"bytes,29,opt,name=proxyInit,proto3" json:"proxyInit,omitempty"`
	// Specifies the Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
	Sds *SDSConfig `protobuf:"bytes,30,opt,name=sds,proto3" json:"sds,omitempty"`
	// Specifies the tag for the Istio docker images.
	Tag string `protobuf:"bytes,31,opt,name=tag,proto3" json:"tag,omitempty"`
	// Specifies the namespace for the telemetry component.
	TelemetryNamespace string `protobuf:"bytes,32,opt,name=telemetryNamespace,proto3" json:"telemetryNamespace,omitempty"`
	// Specifies the Configuration for each of the supported tracers.
	Tracer *TracerConfig `protobuf:"bytes,33,opt,name=tracer,proto3" json:"tracer,omitempty"`
	// Specifies the trust domain that corresponds to the root cert of CA.
	TrustDomain string `protobuf:"bytes,34,opt,name=trustDomain,proto3" json:"trustDomain,omitempty"`
	// Controls whether to use of Mesh Configuration Protocol to distribute configuration.
	UseMCP               bool     `protobuf:"varint,35,opt,name=useMCP,proto3" json:"useMCP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalConfig) Reset()         { *m = GlobalConfig{} }
func (m *GlobalConfig) String() string { return proto.CompactTextString(m) }
func (*GlobalConfig) ProtoMessage()    {}
func (*GlobalConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{13}
}

func (m *GlobalConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalConfig.Unmarshal(m, b)
}
func (m *GlobalConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalConfig.Marshal(b, m, deterministic)
}
func (m *GlobalConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalConfig.Merge(m, src)
}
func (m *GlobalConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalConfig.Size(m)
}
func (m *GlobalConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalConfig proto.InternalMessageInfo

func (m *GlobalConfig) GetArch() *ArchConfig {
	if m != nil {
		return m.Arch
	}
	return nil
}

func (m *GlobalConfig) GetConfigNamespace() string {
	if m != nil {
		return m.ConfigNamespace
	}
	return ""
}

func (m *GlobalConfig) GetConfigValidation() bool {
	if m != nil {
		return m.ConfigValidation
	}
	return false
}

func (m *GlobalConfig) GetControlPlaneSecurityEnabled() bool {
	if m != nil {
		return m.ControlPlaneSecurityEnabled
	}
	return false
}

func (m *GlobalConfig) GetDefaultNodeSelector() map[string]interface{} {
	if m != nil {
		return m.DefaultNodeSelector
	}
	return nil
}

func (m *GlobalConfig) GetDefaultPodDisruptionBudget() *DefaultPodDisruptionBudgetConfig {
	if m != nil {
		return m.DefaultPodDisruptionBudget
	}
	return nil
}

func (m *GlobalConfig) GetDisablePolicyChecks() bool {
	if m != nil {
		return m.DisablePolicyChecks
	}
	return false
}

func (m *GlobalConfig) GetDefaultResources() *DefaultResourcesConfig {
	if m != nil {
		return m.DefaultResources
	}
	return nil
}

func (m *GlobalConfig) GetEnableHelmTest() bool {
	if m != nil {
		return m.EnableHelmTest
	}
	return false
}

func (m *GlobalConfig) GetEnableTracing() bool {
	if m != nil {
		return m.EnableTracing
	}
	return false
}

func (m *GlobalConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *GlobalConfig) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *GlobalConfig) GetIstioNamespace() string {
	if m != nil {
		return m.IstioNamespace
	}
	return ""
}

func (m *GlobalConfig) GetLocalityLbSetting() map[string]string {
	if m != nil {
		return m.LocalityLbSetting
	}
	return nil
}

func (m *GlobalConfig) GetK8SIngress() *KubernetesIngressConfig {
	if m != nil {
		return m.K8SIngress
	}
	return nil
}

func (m *GlobalConfig) GetLogging() *GlobalLoggingConfig {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *GlobalConfig) GetMeshExpansion() *MeshExpansionConfig {
	if m != nil {
		return m.MeshExpansion
	}
	return nil
}

func (m *GlobalConfig) GetMeshNetworks() map[string]interface{} {
	if m != nil {
		return m.MeshNetworks
	}
	return nil
}

func (m *GlobalConfig) GetMonitoringPort() uint32 {
	if m != nil {
		return m.MonitoringPort
	}
	return 0
}

func (m *GlobalConfig) GetMtls() *MTLSConfig {
	if m != nil {
		return m.Mtls
	}
	return nil
}

func (m *GlobalConfig) GetMultiCluster() *MultiClusterConfig {
	if m != nil {
		return m.MultiCluster
	}
	return nil
}

func (m *GlobalConfig) GetOneNamespace() bool {
	if m != nil {
		return m.OneNamespace
	}
	return false
}

func (m *GlobalConfig) GetOutboundTrafficPolicy() *OutboundTrafficPolicyConfig {
	if m != nil {
		return m.OutboundTrafficPolicy
	}
	return nil
}

func (m *GlobalConfig) GetPolicyCheckFailOpen() bool {
	if m != nil {
		return m.PolicyCheckFailOpen
	}
	return false
}

func (m *GlobalConfig) GetPolicyNamespace() string {
	if m != nil {
		return m.PolicyNamespace
	}
	return ""
}

func (m *GlobalConfig) GetPriorityClassName() string {
	if m != nil {
		return m.PriorityClassName
	}
	return ""
}

func (m *GlobalConfig) GetProxy() *ProxyConfig {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *GlobalConfig) GetProxyInit() *ProxyInitConfig {
	if m != nil {
		return m.ProxyInit
	}
	return nil
}

func (m *GlobalConfig) GetSds() *SDSConfig {
	if m != nil {
		return m.Sds
	}
	return nil
}

func (m *GlobalConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *GlobalConfig) GetTelemetryNamespace() string {
	if m != nil {
		return m.TelemetryNamespace
	}
	return ""
}

func (m *GlobalConfig) GetTracer() *TracerConfig {
	if m != nil {
		return m.Tracer
	}
	return nil
}

func (m *GlobalConfig) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *GlobalConfig) GetUseMCP() bool {
	if m != nil {
		return m.UseMCP
	}
	return false
}

// GlobalLoggingConfig specifies the global logging level settings for the Istio control plane components.
type GlobalLoggingConfig struct {
	// Comma-separated minimum per-scope logging level of messages to output, in the form of <scope>:<level>,<scope>:<level>
	// The control plane has different scopes depending on component, but can configure default log level across all components
	// If empty, default scope and level will be used as configured in code
	Level                string   `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalLoggingConfig) Reset()         { *m = GlobalLoggingConfig{} }
func (m *GlobalLoggingConfig) String() string { return proto.CompactTextString(m) }
func (*GlobalLoggingConfig) ProtoMessage()    {}
func (*GlobalLoggingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{14}
}

func (m *GlobalLoggingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalLoggingConfig.Unmarshal(m, b)
}
func (m *GlobalLoggingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalLoggingConfig.Marshal(b, m, deterministic)
}
func (m *GlobalLoggingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalLoggingConfig.Merge(m, src)
}
func (m *GlobalLoggingConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalLoggingConfig.Size(m)
}
func (m *GlobalLoggingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalLoggingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalLoggingConfig proto.InternalMessageInfo

func (m *GlobalLoggingConfig) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

// Configuration for an ingress gateway.
type IngressGatewayConfig struct {
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu           *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CustomService bool                        `protobuf:"varint,6,opt,name=customService,proto3" json:"customService,omitempty"`
	Debug         string                      `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
	Domain        string                      `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
	// Controls whether an ingress gateway is enabled.
	Enabled bool `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env                      map[string]string    `protobuf:"bytes,11,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExternalIPs              []string             `protobuf:"bytes,12,rep,name=externalIPs,proto3" json:"externalIPs,omitempty"`
	K8SIngress               bool                 `protobuf:"varint,13,opt,name=k8sIngress,proto3" json:"k8sIngress,omitempty"`
	K8SIngressHttps          bool                 `protobuf:"varint,14,opt,name=k8sIngressHttps,proto3" json:"k8sIngressHttps,omitempty"`
	Labels                   *GatewayLabelsConfig `protobuf:"bytes,15,opt,name=labels,proto3" json:"labels,omitempty"`
	LoadBalancerIP           string               `protobuf:"bytes,16,opt,name=loadBalancerIP,proto3" json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges []string             `protobuf:"bytes,17,rep,name=loadBalancerSourceRanges,proto3" json:"loadBalancerSourceRanges,omitempty"`
	MeshExpansionPorts       []*PortsConfig       `protobuf:"bytes,18,rep,name=meshExpansionPorts,proto3" json:"meshExpansionPorts,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,19,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations map[string]interface{} `protobuf:"bytes,20,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []map[string]interface{} `protobuf:"bytes,21,opt,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []map[string]interface{} `protobuf:"bytes,22,opt,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Port Configuration for the ingress gateway.
	Ports []*PortsConfig `protobuf:"bytes,23,rep,name=ports,proto3" json:"ports,omitempty"`
	// Number of replicas for the ingress gateway Deployment.
	ReplicaCount uint32 `protobuf:"varint,24,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources map[string]interface{} `protobuf:"bytes,25,opt,name=resources,proto3" json:"resources,omitempty"`
	// Secret Discovery Service (SDS) Configuration for ingress gateway.
	Sds *IngressGatewaySdsConfig `protobuf:"bytes,26,opt,name=sds,proto3" json:"sds,omitempty"`
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,27,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations map[string]interface{} `protobuf:"bytes,28,opt,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,29,opt,name=type,proto3" json:"type,omitempty"`
	// Enables cross-cluster access using SNI matching.
	Zvpn                 *IngressGatewayZvpnConfig `protobuf:"bytes,30,opt,name=zvpn,proto3" json:"zvpn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *IngressGatewayConfig) Reset()         { *m = IngressGatewayConfig{} }
func (m *IngressGatewayConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewayConfig) ProtoMessage()    {}
func (*IngressGatewayConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{15}
}

func (m *IngressGatewayConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressGatewayConfig.Unmarshal(m, b)
}
func (m *IngressGatewayConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressGatewayConfig.Marshal(b, m, deterministic)
}
func (m *IngressGatewayConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewayConfig.Merge(m, src)
}
func (m *IngressGatewayConfig) XXX_Size() int {
	return xxx_messageInfo_IngressGatewayConfig.Size(m)
}
func (m *IngressGatewayConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewayConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewayConfig proto.InternalMessageInfo

func (m *IngressGatewayConfig) GetAutoscaleEnabled() bool {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return false
}

func (m *IngressGatewayConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *IngressGatewayConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *IngressGatewayConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *IngressGatewayConfig) GetCustomService() bool {
	if m != nil {
		return m.CustomService
	}
	return false
}

func (m *IngressGatewayConfig) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *IngressGatewayConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *IngressGatewayConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IngressGatewayConfig) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *IngressGatewayConfig) GetExternalIPs() []string {
	if m != nil {
		return m.ExternalIPs
	}
	return nil
}

func (m *IngressGatewayConfig) GetK8SIngress() bool {
	if m != nil {
		return m.K8SIngress
	}
	return false
}

func (m *IngressGatewayConfig) GetK8SIngressHttps() bool {
	if m != nil {
		return m.K8SIngressHttps
	}
	return false
}

func (m *IngressGatewayConfig) GetLabels() *GatewayLabelsConfig {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *IngressGatewayConfig) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

func (m *IngressGatewayConfig) GetLoadBalancerSourceRanges() []string {
	if m != nil {
		return m.LoadBalancerSourceRanges
	}
	return nil
}

func (m *IngressGatewayConfig) GetMeshExpansionPorts() []*PortsConfig {
	if m != nil {
		return m.MeshExpansionPorts
	}
	return nil
}

func (m *IngressGatewayConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *IngressGatewayConfig) GetPodAnnotations() map[string]interface{} {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *IngressGatewayConfig) GetPodAntiAffinityLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

func (m *IngressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *IngressGatewayConfig) GetPorts() []*PortsConfig {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *IngressGatewayConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *IngressGatewayConfig) GetResources() map[string]interface{} {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *IngressGatewayConfig) GetSds() *IngressGatewaySdsConfig {
	if m != nil {
		return m.Sds
	}
	return nil
}

func (m *IngressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if m != nil {
		return m.SecretVolumes
	}
	return nil
}

func (m *IngressGatewayConfig) GetServiceAnnotations() map[string]interface{} {
	if m != nil {
		return m.ServiceAnnotations
	}
	return nil
}

func (m *IngressGatewayConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IngressGatewayConfig) GetZvpn() *IngressGatewayZvpnConfig {
	if m != nil {
		return m.Zvpn
	}
	return nil
}

// Secret Discovery Service (SDS) Configuration for ingress gateway.
type IngressGatewaySdsConfig struct {
	// If true, ingress gateway fetches credentials from SDS server to handle TLS connections.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// SDS server that watches kubernetes secrets and provisions credentials to ingress gateway.
	// This server runs in the same pod as ingress gateway.
	Image                string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngressGatewaySdsConfig) Reset()         { *m = IngressGatewaySdsConfig{} }
func (m *IngressGatewaySdsConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewaySdsConfig) ProtoMessage()    {}
func (*IngressGatewaySdsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{16}
}

func (m *IngressGatewaySdsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressGatewaySdsConfig.Unmarshal(m, b)
}
func (m *IngressGatewaySdsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressGatewaySdsConfig.Marshal(b, m, deterministic)
}
func (m *IngressGatewaySdsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewaySdsConfig.Merge(m, src)
}
func (m *IngressGatewaySdsConfig) XXX_Size() int {
	return xxx_messageInfo_IngressGatewaySdsConfig.Size(m)
}
func (m *IngressGatewaySdsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewaySdsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewaySdsConfig proto.InternalMessageInfo

func (m *IngressGatewaySdsConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IngressGatewaySdsConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// IngressGatewayZvpnConfig enables cross-cluster access using SNI matching.
type IngressGatewayZvpnConfig struct {
	// Controls whether ZeroVPN is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Suffix               string   `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngressGatewayZvpnConfig) Reset()         { *m = IngressGatewayZvpnConfig{} }
func (m *IngressGatewayZvpnConfig) String() string { return proto.CompactTextString(m) }
func (*IngressGatewayZvpnConfig) ProtoMessage()    {}
func (*IngressGatewayZvpnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{17}
}

func (m *IngressGatewayZvpnConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngressGatewayZvpnConfig.Unmarshal(m, b)
}
func (m *IngressGatewayZvpnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngressGatewayZvpnConfig.Marshal(b, m, deterministic)
}
func (m *IngressGatewayZvpnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngressGatewayZvpnConfig.Merge(m, src)
}
func (m *IngressGatewayZvpnConfig) XXX_Size() int {
	return xxx_messageInfo_IngressGatewayZvpnConfig.Size(m)
}
func (m *IngressGatewayZvpnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IngressGatewayZvpnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IngressGatewayZvpnConfig proto.InternalMessageInfo

func (m *IngressGatewayZvpnConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *IngressGatewayZvpnConfig) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

// Configuration for Kubernetes environment adapter in mixer.
type KubernetesEnvMixerAdapterConfig struct {
	// Enables the Kubernetes env adapter in Mixer.
	//
	// See: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/kubernetesenv/
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesEnvMixerAdapterConfig) Reset()         { *m = KubernetesEnvMixerAdapterConfig{} }
func (m *KubernetesEnvMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*KubernetesEnvMixerAdapterConfig) ProtoMessage()    {}
func (*KubernetesEnvMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{18}
}

func (m *KubernetesEnvMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Unmarshal(m, b)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Marshal(b, m, deterministic)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Merge(m, src)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_Size() int {
	return xxx_messageInfo_KubernetesEnvMixerAdapterConfig.Size(m)
}
func (m *KubernetesEnvMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesEnvMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesEnvMixerAdapterConfig proto.InternalMessageInfo

func (m *KubernetesEnvMixerAdapterConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for the legacy kubernetes Ingress.
type KubernetesIngressConfig struct {
	// Enables gateway for legacy k8s Ingress.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Enables HTTPS legacy k8s Ingress.
	EnableHttps bool `protobuf:"varint,2,opt,name=enableHttps,proto3" json:"enableHttps,omitempty"`
	// Sets the gateway name for legacy k8s Ingress.
	GatewayName          string   `protobuf:"bytes,3,opt,name=gatewayName,proto3" json:"gatewayName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesIngressConfig) Reset()         { *m = KubernetesIngressConfig{} }
func (m *KubernetesIngressConfig) String() string { return proto.CompactTextString(m) }
func (*KubernetesIngressConfig) ProtoMessage()    {}
func (*KubernetesIngressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{19}
}

func (m *KubernetesIngressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesIngressConfig.Unmarshal(m, b)
}
func (m *KubernetesIngressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesIngressConfig.Marshal(b, m, deterministic)
}
func (m *KubernetesIngressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesIngressConfig.Merge(m, src)
}
func (m *KubernetesIngressConfig) XXX_Size() int {
	return xxx_messageInfo_KubernetesIngressConfig.Size(m)
}
func (m *KubernetesIngressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesIngressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesIngressConfig proto.InternalMessageInfo

func (m *KubernetesIngressConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *KubernetesIngressConfig) GetEnableHttps() bool {
	if m != nil {
		return m.EnableHttps
	}
	return false
}

func (m *KubernetesIngressConfig) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

// Configuration for when mixer starts rejecting grpc requests.
type LoadSheddingConfig struct {
	LatencyThreshold     string   `protobuf:"bytes,1,opt,name=latencyThreshold,proto3" json:"latencyThreshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadSheddingConfig) Reset()         { *m = LoadSheddingConfig{} }
func (m *LoadSheddingConfig) String() string { return proto.CompactTextString(m) }
func (*LoadSheddingConfig) ProtoMessage()    {}
func (*LoadSheddingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{20}
}

func (m *LoadSheddingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadSheddingConfig.Unmarshal(m, b)
}
func (m *LoadSheddingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadSheddingConfig.Marshal(b, m, deterministic)
}
func (m *LoadSheddingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadSheddingConfig.Merge(m, src)
}
func (m *LoadSheddingConfig) XXX_Size() int {
	return xxx_messageInfo_LoadSheddingConfig.Size(m)
}
func (m *LoadSheddingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadSheddingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LoadSheddingConfig proto.InternalMessageInfo

func (m *LoadSheddingConfig) GetLatencyThreshold() string {
	if m != nil {
		return m.LatencyThreshold
	}
	return ""
}

// MTLS settings for the applications that Istio manages.
type MTLSConfig struct {
	// Enables MTLS for service to service traffic.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MTLSConfig) Reset()         { *m = MTLSConfig{} }
func (m *MTLSConfig) String() string { return proto.CompactTextString(m) }
func (*MTLSConfig) ProtoMessage()    {}
func (*MTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{21}
}

func (m *MTLSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MTLSConfig.Unmarshal(m, b)
}
func (m *MTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MTLSConfig.Marshal(b, m, deterministic)
}
func (m *MTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTLSConfig.Merge(m, src)
}
func (m *MTLSConfig) XXX_Size() int {
	return xxx_messageInfo_MTLSConfig.Size(m)
}
func (m *MTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MTLSConfig proto.InternalMessageInfo

func (m *MTLSConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for Istio mesh expansion to bare metal.
type MeshExpansionConfig struct {
	// Exposes Pilot and Citadel mTLS on the ingress gateway.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Exposes Pilot and Citadel mTLS and the plain text Pilot ports on an internal gateway.
	UseILB               bool     `protobuf:"varint,2,opt,name=useILB,proto3" json:"useILB,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshExpansionConfig) Reset()         { *m = MeshExpansionConfig{} }
func (m *MeshExpansionConfig) String() string { return proto.CompactTextString(m) }
func (*MeshExpansionConfig) ProtoMessage()    {}
func (*MeshExpansionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{22}
}

func (m *MeshExpansionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshExpansionConfig.Unmarshal(m, b)
}
func (m *MeshExpansionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshExpansionConfig.Marshal(b, m, deterministic)
}
func (m *MeshExpansionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshExpansionConfig.Merge(m, src)
}
func (m *MeshExpansionConfig) XXX_Size() int {
	return xxx_messageInfo_MeshExpansionConfig.Size(m)
}
func (m *MeshExpansionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshExpansionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshExpansionConfig proto.InternalMessageInfo

func (m *MeshExpansionConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MeshExpansionConfig) GetUseILB() bool {
	if m != nil {
		return m.UseILB
	}
	return false
}

// Configuration for Mixer adapters.
type MixerAdaptersConfig struct {
	// Configuration for Kubernetes environment adapter in mixer.
	Kubernetesenv *KubernetesEnvMixerAdapterConfig `protobuf:"bytes,1,opt,name=kubernetesenv,proto3" json:"kubernetesenv,omitempty"`
	// Configuration for Prometheus adapter in mixer.
	Prometheus *PrometheusMixerAdapterConfig `protobuf:"bytes,2,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	// Configuration for stdio adapter in mixer, recommended for debug usage only.
	Stdio *StdioMixerAdapterConfig `protobuf:"bytes,3,opt,name=stdio,proto3" json:"stdio,omitempty"`
	// Sets the --useAdapterCRDs mixer startup argument.
	UseAdapterCRDs       bool     `protobuf:"varint,4,opt,name=useAdapterCRDs,proto3" json:"useAdapterCRDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixerAdaptersConfig) Reset()         { *m = MixerAdaptersConfig{} }
func (m *MixerAdaptersConfig) String() string { return proto.CompactTextString(m) }
func (*MixerAdaptersConfig) ProtoMessage()    {}
func (*MixerAdaptersConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{23}
}

func (m *MixerAdaptersConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixerAdaptersConfig.Unmarshal(m, b)
}
func (m *MixerAdaptersConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixerAdaptersConfig.Marshal(b, m, deterministic)
}
func (m *MixerAdaptersConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerAdaptersConfig.Merge(m, src)
}
func (m *MixerAdaptersConfig) XXX_Size() int {
	return xxx_messageInfo_MixerAdaptersConfig.Size(m)
}
func (m *MixerAdaptersConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerAdaptersConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerAdaptersConfig proto.InternalMessageInfo

func (m *MixerAdaptersConfig) GetKubernetesenv() *KubernetesEnvMixerAdapterConfig {
	if m != nil {
		return m.Kubernetesenv
	}
	return nil
}

func (m *MixerAdaptersConfig) GetPrometheus() *PrometheusMixerAdapterConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *MixerAdaptersConfig) GetStdio() *StdioMixerAdapterConfig {
	if m != nil {
		return m.Stdio
	}
	return nil
}

func (m *MixerAdaptersConfig) GetUseAdapterCRDs() bool {
	if m != nil {
		return m.UseAdapterCRDs
	}
	return false
}

// Configuration for Mixer.
type MixerConfig struct {
	// MixerPolicyConfig is set of configurations for Mixer Policy
	Policy *MixerPolicyConfig `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// MixerTelemetryConfig is set of configurations for Mixer Telemetry
	Telemetry            *MixerTelemetryConfig `protobuf:"bytes,2,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MixerConfig) Reset()         { *m = MixerConfig{} }
func (m *MixerConfig) String() string { return proto.CompactTextString(m) }
func (*MixerConfig) ProtoMessage()    {}
func (*MixerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{24}
}

func (m *MixerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixerConfig.Unmarshal(m, b)
}
func (m *MixerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixerConfig.Marshal(b, m, deterministic)
}
func (m *MixerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerConfig.Merge(m, src)
}
func (m *MixerConfig) XXX_Size() int {
	return xxx_messageInfo_MixerConfig.Size(m)
}
func (m *MixerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerConfig proto.InternalMessageInfo

func (m *MixerConfig) GetPolicy() *MixerPolicyConfig {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *MixerConfig) GetTelemetry() *MixerTelemetryConfig {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

// Configuration for Mixer Policy.
type MixerPolicyConfig struct {
	// Controls whether a HorizontalPodAutoscaler is installed for Mixer Policy.
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Mixer Policy.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Mixer Policy.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Controls whether Mixer Policy is enabled
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Image name used for Mixer Policy.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-mixer, docker.io/someuser:custom-mixer
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// K8s annotations to attach to mixer policy deployment
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations map[string]interface{} `protobuf:"bytes,7,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"`
	// Number of replicas in the Mixer Policy Deployment
	ReplicaCount         uint32   `protobuf:"varint,8,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixerPolicyConfig) Reset()         { *m = MixerPolicyConfig{} }
func (m *MixerPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*MixerPolicyConfig) ProtoMessage()    {}
func (*MixerPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{25}
}

func (m *MixerPolicyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixerPolicyConfig.Unmarshal(m, b)
}
func (m *MixerPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixerPolicyConfig.Marshal(b, m, deterministic)
}
func (m *MixerPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerPolicyConfig.Merge(m, src)
}
func (m *MixerPolicyConfig) XXX_Size() int {
	return xxx_messageInfo_MixerPolicyConfig.Size(m)
}
func (m *MixerPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerPolicyConfig proto.InternalMessageInfo

func (m *MixerPolicyConfig) GetAutoscaleEnabled() bool {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return false
}

func (m *MixerPolicyConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *MixerPolicyConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *MixerPolicyConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *MixerPolicyConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MixerPolicyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MixerPolicyConfig) GetPodAnnotations() map[string]interface{} {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *MixerPolicyConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

// Configuration for Mixer Telemetry.
type MixerTelemetryConfig struct {
	// Configuration for different mixer adapters.
	Adapters *MixerAdaptersConfig `protobuf:"bytes,1,opt,name=adapters,proto3" json:"adapters,omitempty"`
	// Controls whether a HorizontalPodAutoscaler is installed for Mixer Telemetry.
	AutoscaleEnabled bool `protobuf:"varint,2,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Mixer Telemetry.
	AutoscaleMax uint32 `protobuf:"varint,3,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Mixer Telemetry.
	AutoscaleMin uint32 `protobuf:"varint,4,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Controls whether Mixer Telemetry is enabled.
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the Mixer container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env map[string]string `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Image name used for Mixer Telemetry.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-mixer, docker.io/someuser:custom-mixer
	Image string `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	// LoadSheddingConfig configs when mixer starts rejecting grpc requests.
	Loadshedding *LoadSheddingConfig `protobuf:"bytes,9,opt,name=loadshedding,proto3" json:"loadshedding,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// K8s annotations to attach to mixer telemetry deployment
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	PodAnnotations map[string]interface{} `protobuf:"bytes,11,opt,name=podAnnotations,proto3" json:"podAnnotations,omitempty"`
	// Number of replicas in the Mixer Telemetry Deployment.
	ReplicaCount uint32 `protobuf:"varint,12,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *v1.ResourceRequirements `protobuf:"bytes,13,opt,name=resources,proto3" json:"resources,omitempty"`
	// Controls whether to enable the sticky session setting when choosing backend pods.
	SessionAffinityEnabled bool     `protobuf:"varint,14,opt,name=sessionAffinityEnabled,proto3" json:"sessionAffinityEnabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MixerTelemetryConfig) Reset()         { *m = MixerTelemetryConfig{} }
func (m *MixerTelemetryConfig) String() string { return proto.CompactTextString(m) }
func (*MixerTelemetryConfig) ProtoMessage()    {}
func (*MixerTelemetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{26}
}

func (m *MixerTelemetryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixerTelemetryConfig.Unmarshal(m, b)
}
func (m *MixerTelemetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixerTelemetryConfig.Marshal(b, m, deterministic)
}
func (m *MixerTelemetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixerTelemetryConfig.Merge(m, src)
}
func (m *MixerTelemetryConfig) XXX_Size() int {
	return xxx_messageInfo_MixerTelemetryConfig.Size(m)
}
func (m *MixerTelemetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MixerTelemetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MixerTelemetryConfig proto.InternalMessageInfo

func (m *MixerTelemetryConfig) GetAdapters() *MixerAdaptersConfig {
	if m != nil {
		return m.Adapters
	}
	return nil
}

func (m *MixerTelemetryConfig) GetAutoscaleEnabled() bool {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return false
}

func (m *MixerTelemetryConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *MixerTelemetryConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *MixerTelemetryConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *MixerTelemetryConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MixerTelemetryConfig) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *MixerTelemetryConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MixerTelemetryConfig) GetLoadshedding() *LoadSheddingConfig {
	if m != nil {
		return m.Loadshedding
	}
	return nil
}

func (m *MixerTelemetryConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *MixerTelemetryConfig) GetPodAnnotations() map[string]interface{} {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *MixerTelemetryConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *MixerTelemetryConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *MixerTelemetryConfig) GetSessionAffinityEnabled() bool {
	if m != nil {
		return m.SessionAffinityEnabled
	}
	return false
}

// MultiClusterConfig specifies the Configuration for Istio mesh across multiple clusters through the istio gateways.
type MultiClusterConfig struct {
	// Enables the connection between two kubernetes clusters via their respective ingressgateway services.
	// Use if the pods in each cluster cannot directly talk to one another.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiClusterConfig) Reset()         { *m = MultiClusterConfig{} }
func (m *MultiClusterConfig) String() string { return proto.CompactTextString(m) }
func (*MultiClusterConfig) ProtoMessage()    {}
func (*MultiClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{27}
}

func (m *MultiClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiClusterConfig.Unmarshal(m, b)
}
func (m *MultiClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiClusterConfig.Marshal(b, m, deterministic)
}
func (m *MultiClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiClusterConfig.Merge(m, src)
}
func (m *MultiClusterConfig) XXX_Size() int {
	return xxx_messageInfo_MultiClusterConfig.Size(m)
}
func (m *MultiClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MultiClusterConfig proto.InternalMessageInfo

func (m *MultiClusterConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for Node Agent Daemonset.
type NodeAgentConfig struct {
	// Controls whether Node Agent is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the Node Agent container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env map[string]interface{} `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Image name for the Node Agent DaemonSet.
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector         map[string]interface{} `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeAgentConfig) Reset()         { *m = NodeAgentConfig{} }
func (m *NodeAgentConfig) String() string { return proto.CompactTextString(m) }
func (*NodeAgentConfig) ProtoMessage()    {}
func (*NodeAgentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{28}
}

func (m *NodeAgentConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeAgentConfig.Unmarshal(m, b)
}
func (m *NodeAgentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeAgentConfig.Marshal(b, m, deterministic)
}
func (m *NodeAgentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAgentConfig.Merge(m, src)
}
func (m *NodeAgentConfig) XXX_Size() int {
	return xxx_messageInfo_NodeAgentConfig.Size(m)
}
func (m *NodeAgentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAgentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAgentConfig proto.InternalMessageInfo

func (m *NodeAgentConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NodeAgentConfig) GetEnv() map[string]interface{} {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *NodeAgentConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NodeAgentConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// OutboundTrafficPolicyConfig controls the default behavior of the sidecar for handling outbound traffic from the application.
type OutboundTrafficPolicyConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutboundTrafficPolicyConfig) Reset()         { *m = OutboundTrafficPolicyConfig{} }
func (m *OutboundTrafficPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*OutboundTrafficPolicyConfig) ProtoMessage()    {}
func (*OutboundTrafficPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{29}
}

func (m *OutboundTrafficPolicyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutboundTrafficPolicyConfig.Unmarshal(m, b)
}
func (m *OutboundTrafficPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutboundTrafficPolicyConfig.Marshal(b, m, deterministic)
}
func (m *OutboundTrafficPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTrafficPolicyConfig.Merge(m, src)
}
func (m *OutboundTrafficPolicyConfig) XXX_Size() int {
	return xxx_messageInfo_OutboundTrafficPolicyConfig.Size(m)
}
func (m *OutboundTrafficPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTrafficPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTrafficPolicyConfig proto.InternalMessageInfo

// Configuration for Pilot.
type PilotConfig struct {
	// Controls whether Pilot is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether a HorizontalPodAutoscaler is installed for Pilot.
	AutoscaleEnabled bool `protobuf:"varint,2,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMax uint32 `protobuf:"varint,4,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// Number of replicas in the Pilot Deployment.
	ReplicaCount uint32 `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// Image name used for Pilot.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-pilot, docker.io/someuser:custom-pilot
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// Controls whether a sidecar proxy is installed in the Pilot pod.
	//
	// Setting to true installs a proxy in the Pilot pod, used primarily for collecting Pilot telemetry.
	Sidecar bool `protobuf:"varint,7,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	// Trace sampling fraction.
	//
	// Used to set the fraction of time that traces are sampled. Higher values are more accurate but add CPU overhead.
	//
	// Allowed values: 0.0 to 1.0
	TraceSampling float64 `protobuf:"fixed64,8,opt,name=traceSampling,proto3" json:"traceSampling,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *v1.ResourceRequirements `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	// Namespace that the configuration management feature is installed into, if different from Pilot namespace.
	ConfigNamespace string `protobuf:"bytes,10,opt,name=configNamespace,proto3" json:"configNamespace,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	Cpu *CPUTargetUtilizationConfig `protobuf:"bytes,11,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,12,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// Maximum duration that a sidecar can be connected to a pilot.
	//
	// This setting balances out load across pilot instances, but adds some resource overhead.
	//
	// Examples: 300s, 30m, 1h
	KeepaliveMaxServerConnectionAge *duration.Duration `protobuf:"bytes,13,opt,name=keepaliveMaxServerConnectionAge,proto3" json:"keepaliveMaxServerConnectionAge,omitempty"`
	// Labels that are added to Pilot pods.
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	DeploymentLabels map[string]interface{} `protobuf:"bytes,14,opt,name=deploymentLabels,proto3" json:"deploymentLabels,omitempty"`
	// Used to override control plane networks.
	MeshNetworks map[string]interface{} `protobuf:"bytes,15,opt,name=meshNetworks,proto3" json:"meshNetworks,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []map[string]interface{} `protobuf:"bytes,16,opt,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []map[string]interface{} `protobuf:"bytes,17,opt,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Configuration settings passed to Pilot as a ConfigMap.
	//
	// This controls whether the mesh config map, generated from values.yaml is generated.
	// If false, pilot wil use default values or user-supplied values, in that order of preference.
	ConfigMap bool `protobuf:"varint,18,opt,name=configMap,proto3" json:"configMap,omitempty"`
	// Controls legacy k8s ingress. Only one pilot profile should enable ingress support.
	Ingress *PilotIngressConfig `protobuf:"bytes,19,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// Controls whether Pilot is configured through the Mesh Control Protocol (MCP).
	//
	// If set to true, Pilot requires an MCP server (like Galley) to be installed.
	UseMCP bool `protobuf:"varint,20,opt,name=useMCP,proto3" json:"useMCP,omitempty"`
	// Environment variables passed to the Pilot container.
	//
	// Examples:
	// env:
	//   ENV_VAR_1: value1
	//   ENV_VAR_2: value2
	Env map[string]string `protobuf:"bytes,21,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Controls whether Istio policy is applied to Pilot.
	Policy *PilotPolicyConfig `protobuf:"bytes,22,opt,name=policy,proto3" json:"policy,omitempty"`
	// Controls whether telemetry is exported for Pilot.
	Telemetry            *PilotTelemetryConfig `protobuf:"bytes,23,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PilotConfig) Reset()         { *m = PilotConfig{} }
func (m *PilotConfig) String() string { return proto.CompactTextString(m) }
func (*PilotConfig) ProtoMessage()    {}
func (*PilotConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{30}
}

func (m *PilotConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PilotConfig.Unmarshal(m, b)
}
func (m *PilotConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PilotConfig.Marshal(b, m, deterministic)
}
func (m *PilotConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotConfig.Merge(m, src)
}
func (m *PilotConfig) XXX_Size() int {
	return xxx_messageInfo_PilotConfig.Size(m)
}
func (m *PilotConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotConfig proto.InternalMessageInfo

func (m *PilotConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PilotConfig) GetAutoscaleEnabled() bool {
	if m != nil {
		return m.AutoscaleEnabled
	}
	return false
}

func (m *PilotConfig) GetAutoscaleMin() uint32 {
	if m != nil {
		return m.AutoscaleMin
	}
	return 0
}

func (m *PilotConfig) GetAutoscaleMax() uint32 {
	if m != nil {
		return m.AutoscaleMax
	}
	return 0
}

func (m *PilotConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *PilotConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PilotConfig) GetSidecar() bool {
	if m != nil {
		return m.Sidecar
	}
	return false
}

func (m *PilotConfig) GetTraceSampling() float64 {
	if m != nil {
		return m.TraceSampling
	}
	return 0
}

func (m *PilotConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PilotConfig) GetConfigNamespace() string {
	if m != nil {
		return m.ConfigNamespace
	}
	return ""
}

func (m *PilotConfig) GetCpu() *CPUTargetUtilizationConfig {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *PilotConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PilotConfig) GetKeepaliveMaxServerConnectionAge() *duration.Duration {
	if m != nil {
		return m.KeepaliveMaxServerConnectionAge
	}
	return nil
}

func (m *PilotConfig) GetDeploymentLabels() map[string]interface{} {
	if m != nil {
		return m.DeploymentLabels
	}
	return nil
}

func (m *PilotConfig) GetMeshNetworks() map[string]interface{} {
	if m != nil {
		return m.MeshNetworks
	}
	return nil
}

func (m *PilotConfig) GetPodAntiAffinityLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

func (m *PilotConfig) GetPodAntiAffinityTermLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *PilotConfig) GetConfigMap() bool {
	if m != nil {
		return m.ConfigMap
	}
	return false
}

func (m *PilotConfig) GetIngress() *PilotIngressConfig {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *PilotConfig) GetUseMCP() bool {
	if m != nil {
		return m.UseMCP
	}
	return false
}

func (m *PilotConfig) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *PilotConfig) GetPolicy() *PilotPolicyConfig {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *PilotConfig) GetTelemetry() *PilotTelemetryConfig {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

// Controls legacy k8s ingress. Only one pilot profile should enable ingress support.
type PilotIngressConfig struct {
	// Sets the type ingress service for Pilot.
	//
	// If empty, node-port is assumed.
	//
	// Allowed values: node-port, istio-ingressgateway, ingress
	IngressService string `protobuf:"bytes,1,opt,name=ingressService,proto3" json:"ingressService,omitempty"`
	// If mode is STRICT, this value must be set on "kubernetes.io/ingress.class" annotation to activate.
	IngressClass         string   `protobuf:"bytes,3,opt,name=ingressClass,proto3" json:"ingressClass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PilotIngressConfig) Reset()         { *m = PilotIngressConfig{} }
func (m *PilotIngressConfig) String() string { return proto.CompactTextString(m) }
func (*PilotIngressConfig) ProtoMessage()    {}
func (*PilotIngressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{31}
}

func (m *PilotIngressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PilotIngressConfig.Unmarshal(m, b)
}
func (m *PilotIngressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PilotIngressConfig.Marshal(b, m, deterministic)
}
func (m *PilotIngressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotIngressConfig.Merge(m, src)
}
func (m *PilotIngressConfig) XXX_Size() int {
	return xxx_messageInfo_PilotIngressConfig.Size(m)
}
func (m *PilotIngressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotIngressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotIngressConfig proto.InternalMessageInfo

func (m *PilotIngressConfig) GetIngressService() string {
	if m != nil {
		return m.IngressService
	}
	return ""
}

func (m *PilotIngressConfig) GetIngressClass() string {
	if m != nil {
		return m.IngressClass
	}
	return ""
}

// Controls whether Istio policy is applied to Pilot.
type PilotPolicyConfig struct {
	// Controls whether Istio policy is applied to Pilot.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PilotPolicyConfig) Reset()         { *m = PilotPolicyConfig{} }
func (m *PilotPolicyConfig) String() string { return proto.CompactTextString(m) }
func (*PilotPolicyConfig) ProtoMessage()    {}
func (*PilotPolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{32}
}

func (m *PilotPolicyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PilotPolicyConfig.Unmarshal(m, b)
}
func (m *PilotPolicyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PilotPolicyConfig.Marshal(b, m, deterministic)
}
func (m *PilotPolicyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotPolicyConfig.Merge(m, src)
}
func (m *PilotPolicyConfig) XXX_Size() int {
	return xxx_messageInfo_PilotPolicyConfig.Size(m)
}
func (m *PilotPolicyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotPolicyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotPolicyConfig proto.InternalMessageInfo

func (m *PilotPolicyConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Controls whether telemetry is exported for Pilot.
type PilotTelemetryConfig struct {
	// Controls whether telemetry is exported for Pilot.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PilotTelemetryConfig) Reset()         { *m = PilotTelemetryConfig{} }
func (m *PilotTelemetryConfig) String() string { return proto.CompactTextString(m) }
func (*PilotTelemetryConfig) ProtoMessage()    {}
func (*PilotTelemetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{33}
}

func (m *PilotTelemetryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PilotTelemetryConfig.Unmarshal(m, b)
}
func (m *PilotTelemetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PilotTelemetryConfig.Marshal(b, m, deterministic)
}
func (m *PilotTelemetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PilotTelemetryConfig.Merge(m, src)
}
func (m *PilotTelemetryConfig) XXX_Size() int {
	return xxx_messageInfo_PilotTelemetryConfig.Size(m)
}
func (m *PilotTelemetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PilotTelemetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PilotTelemetryConfig proto.InternalMessageInfo

func (m *PilotTelemetryConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for a port.
type PortsConfig struct {
	// Port name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port number.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// NodePort number.
	NodePort int32 `protobuf:"varint,3,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	// Target port number.
	TargetPort           int32    `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortsConfig) Reset()         { *m = PortsConfig{} }
func (m *PortsConfig) String() string { return proto.CompactTextString(m) }
func (*PortsConfig) ProtoMessage()    {}
func (*PortsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{34}
}

func (m *PortsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortsConfig.Unmarshal(m, b)
}
func (m *PortsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortsConfig.Marshal(b, m, deterministic)
}
func (m *PortsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortsConfig.Merge(m, src)
}
func (m *PortsConfig) XXX_Size() int {
	return xxx_messageInfo_PortsConfig.Size(m)
}
func (m *PortsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PortsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PortsConfig proto.InternalMessageInfo

func (m *PortsConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortsConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortsConfig) GetNodePort() int32 {
	if m != nil {
		return m.NodePort
	}
	return 0
}

func (m *PortsConfig) GetTargetPort() int32 {
	if m != nil {
		return m.TargetPort
	}
	return 0
}

// Configuration for Prometheus.
type PrometheusConfig struct {
	CreatePrometheusResource bool                      `protobuf:"varint,1,opt,name=createPrometheusResource,proto3" json:"createPrometheusResource,omitempty"`
	Enabled                  bool                      `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ReplicaCount             uint32                    `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	Hub                      string                    `protobuf:"bytes,4,opt,name=hub,proto3" json:"hub,omitempty"`
	Tag                      string                    `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Retention                string                    `protobuf:"bytes,6,opt,name=retention,proto3" json:"retention,omitempty"`
	NodeSelector             map[string]interface{}   `protobuf:"bytes,7,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	ScrapeInterval           *duration.Duration        `protobuf:"bytes,8,opt,name=scrapeInterval,proto3" json:"scrapeInterval,omitempty"`
	ContextPath              string                    `protobuf:"bytes,9,opt,name=contextPath,proto3" json:"contextPath,omitempty"`
	Ingress                  *AddonIngressConfig       `protobuf:"bytes,10,opt,name=ingress,proto3" json:"ingress,omitempty"`
	Service                  *PrometheusServiceConfig  `protobuf:"bytes,11,opt,name=service,proto3" json:"service,omitempty"`
	Security                 *PrometheusSecurityConfig `protobuf:"bytes,12,opt,name=security,proto3" json:"security,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *PrometheusConfig) Reset()         { *m = PrometheusConfig{} }
func (m *PrometheusConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusConfig) ProtoMessage()    {}
func (*PrometheusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{35}
}

func (m *PrometheusConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrometheusConfig.Unmarshal(m, b)
}
func (m *PrometheusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrometheusConfig.Marshal(b, m, deterministic)
}
func (m *PrometheusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusConfig.Merge(m, src)
}
func (m *PrometheusConfig) XXX_Size() int {
	return xxx_messageInfo_PrometheusConfig.Size(m)
}
func (m *PrometheusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusConfig proto.InternalMessageInfo

func (m *PrometheusConfig) GetCreatePrometheusResource() bool {
	if m != nil {
		return m.CreatePrometheusResource
	}
	return false
}

func (m *PrometheusConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PrometheusConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *PrometheusConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *PrometheusConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PrometheusConfig) GetRetention() string {
	if m != nil {
		return m.Retention
	}
	return ""
}

func (m *PrometheusConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *PrometheusConfig) GetScrapeInterval() *duration.Duration {
	if m != nil {
		return m.ScrapeInterval
	}
	return nil
}

func (m *PrometheusConfig) GetContextPath() string {
	if m != nil {
		return m.ContextPath
	}
	return ""
}

func (m *PrometheusConfig) GetIngress() *AddonIngressConfig {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *PrometheusConfig) GetService() *PrometheusServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *PrometheusConfig) GetSecurity() *PrometheusSecurityConfig {
	if m != nil {
		return m.Security
	}
	return nil
}

// Configuration for Prometheus adapter in mixer.
type PrometheusMixerAdapterConfig struct {
	// Enables the Prometheus adapter in Mixer.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sets the duration after which Prometheus registry purges a metric.
	//
	// See: https://istio.io/docs/reference/config/policy-and-telemetry/adapters/prometheus/#Params
	MetricsExpiryDuration *duration.Duration `protobuf:"bytes,2,opt,name=metricsExpiryDuration,proto3" json:"metricsExpiryDuration,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *PrometheusMixerAdapterConfig) Reset()         { *m = PrometheusMixerAdapterConfig{} }
func (m *PrometheusMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusMixerAdapterConfig) ProtoMessage()    {}
func (*PrometheusMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{36}
}

func (m *PrometheusMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrometheusMixerAdapterConfig.Unmarshal(m, b)
}
func (m *PrometheusMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrometheusMixerAdapterConfig.Marshal(b, m, deterministic)
}
func (m *PrometheusMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusMixerAdapterConfig.Merge(m, src)
}
func (m *PrometheusMixerAdapterConfig) XXX_Size() int {
	return xxx_messageInfo_PrometheusMixerAdapterConfig.Size(m)
}
func (m *PrometheusMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusMixerAdapterConfig proto.InternalMessageInfo

func (m *PrometheusMixerAdapterConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PrometheusMixerAdapterConfig) GetMetricsExpiryDuration() *duration.Duration {
	if m != nil {
		return m.MetricsExpiryDuration
	}
	return nil
}

// Configuration for Prometheus adapter security.
type PrometheusSecurityConfig struct {
	// Controls whether Prometheus security is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrometheusSecurityConfig) Reset()         { *m = PrometheusSecurityConfig{} }
func (m *PrometheusSecurityConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusSecurityConfig) ProtoMessage()    {}
func (*PrometheusSecurityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{37}
}

func (m *PrometheusSecurityConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrometheusSecurityConfig.Unmarshal(m, b)
}
func (m *PrometheusSecurityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrometheusSecurityConfig.Marshal(b, m, deterministic)
}
func (m *PrometheusSecurityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusSecurityConfig.Merge(m, src)
}
func (m *PrometheusSecurityConfig) XXX_Size() int {
	return xxx_messageInfo_PrometheusSecurityConfig.Size(m)
}
func (m *PrometheusSecurityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusSecurityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusSecurityConfig proto.InternalMessageInfo

func (m *PrometheusSecurityConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for Prometheus adapter service.
type PrometheusServiceConfig struct {
	Annotations          map[string]interface{}          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
	NodePort             *PrometheusServiceNodePortConfig `protobuf:"bytes,2,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PrometheusServiceConfig) Reset()         { *m = PrometheusServiceConfig{} }
func (m *PrometheusServiceConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusServiceConfig) ProtoMessage()    {}
func (*PrometheusServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{38}
}

func (m *PrometheusServiceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrometheusServiceConfig.Unmarshal(m, b)
}
func (m *PrometheusServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrometheusServiceConfig.Marshal(b, m, deterministic)
}
func (m *PrometheusServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusServiceConfig.Merge(m, src)
}
func (m *PrometheusServiceConfig) XXX_Size() int {
	return xxx_messageInfo_PrometheusServiceConfig.Size(m)
}
func (m *PrometheusServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusServiceConfig proto.InternalMessageInfo

func (m *PrometheusServiceConfig) GetAnnotations() map[string]interface{} {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PrometheusServiceConfig) GetNodePort() *PrometheusServiceNodePortConfig {
	if m != nil {
		return m.NodePort
	}
	return nil
}

// Configuration for Prometheus Service NodePort.
type PrometheusServiceNodePortConfig struct {
	// Controls whether Prometheus NodePort config is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrometheusServiceNodePortConfig) Reset()         { *m = PrometheusServiceNodePortConfig{} }
func (m *PrometheusServiceNodePortConfig) String() string { return proto.CompactTextString(m) }
func (*PrometheusServiceNodePortConfig) ProtoMessage()    {}
func (*PrometheusServiceNodePortConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{39}
}

func (m *PrometheusServiceNodePortConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrometheusServiceNodePortConfig.Unmarshal(m, b)
}
func (m *PrometheusServiceNodePortConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrometheusServiceNodePortConfig.Marshal(b, m, deterministic)
}
func (m *PrometheusServiceNodePortConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrometheusServiceNodePortConfig.Merge(m, src)
}
func (m *PrometheusServiceNodePortConfig) XXX_Size() int {
	return xxx_messageInfo_PrometheusServiceNodePortConfig.Size(m)
}
func (m *PrometheusServiceNodePortConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrometheusServiceNodePortConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrometheusServiceNodePortConfig proto.InternalMessageInfo

func (m *PrometheusServiceNodePortConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PrometheusServiceNodePortConfig) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Configuration for Proxy.
type ProxyConfig struct {
	// Specifies the path to write the sidecar access log file.
	AccessLogFile string `protobuf:"bytes,1,opt,name=accessLogFile,proto3" json:"accessLogFile,omitempty"`
	// Configures how and what fields are displayed in sidecar access log.
	AccessLogFormat string `protobuf:"bytes,2,opt,name=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`
	// Domain for the cluster, default: "cluster.local".
	//
	// K8s allows this to be customized, see https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/
	ClusterDomain string `protobuf:"bytes,5,opt,name=clusterDomain,proto3" json:"clusterDomain,omitempty"`
	// Per Component log level for proxy, applies to gateways and sidecars.
	//
	// If a component level is not set, then the global "logLevel" will be used. If left empty, "misc:error" is used.
	ComponentLogLevel string `protobuf:"bytes,6,opt,name=componentLogLevel,proto3" json:"componentLogLevel,omitempty"`
	// Controls number of proxy worker threads.
	//
	// If set to 0 (default), then start worker thread for each CPU thread/core.
	Concurrency uint32 `protobuf:"varint,7,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// Configures the DNS refresh rate for Envoy cluster of type STRICT_DNS.
	//
	// This must be given it terms of seconds. For example, 300s is valid but 5m is invalid.
	DnsRefreshRate *duration.Duration `protobuf:"bytes,8,opt,name=dnsRefreshRate,proto3" json:"dnsRefreshRate,omitempty"`
	// Enables core dumps for newly injected sidecars.
	//
	// If set, newly injected sidecars will have core dumps enabled.
	EnableCoreDump bool `protobuf:"varint,9,opt,name=enableCoreDump,proto3" json:"enableCoreDump,omitempty"`
	// Configures Envoy Metrics Service.
	EnvoyMetricsService *EnvoyMetricsConfig `protobuf:"bytes,10,opt,name=envoyMetricsService,proto3" json:"envoyMetricsService,omitempty"`
	// Configures statsd export in Envoy.
	EnvoyStatsd *EnvoyMetricsConfig `protobuf:"bytes,11,opt,name=envoyStatsd,proto3" json:"envoyStatsd,omitempty"`
	// Specifies the Istio ingress ports not to capture.
	ExcludeInboundPorts string `protobuf:"bytes,12,opt,name=excludeInboundPorts,proto3" json:"excludeInboundPorts,omitempty"`
	// Lists the excluded IP ranges of Istio egress traffic that the sidecar captures.
	ExcludeIPRanges string `protobuf:"bytes,13,opt,name=excludeIPRanges,proto3" json:"excludeIPRanges,omitempty"`
	// Image name or path for the proxy, default: "proxyv2".
	//
	// If registry or tag are not specified, global.hub and global.tag are used.
	//
	// Examples: my-proxy (uses global.hub/tag), docker.io/myrepo/my-proxy:v1.0.0
	Image string `protobuf:"bytes,14,opt,name=image,proto3" json:"image,omitempty"`
	// Specifies the Istio ingress ports to capture.
	//
	// Examples:
	// "":          Redirect no inbound traffic to Envoy.
	// "*":         Redirect all inbound traffic to Envoy.
	// "80,8080":   Redirect only selected ports.
	IncludeInboundPorts string `protobuf:"bytes,15,opt,name=includeInboundPorts,proto3" json:"includeInboundPorts,omitempty"`
	// Lists the IP ranges of Istio egress traffic that the sidecar captures.
	//
	// Example: "172.30.0.0/16,172.20.0.0/16"
	// This would only capture egress traffic on those two IP Ranges, all other outbound traffic would # be allowed by the sidecar."
	IncludeIPRanges string `protobuf:"bytes,16,opt,name=includeIPRanges,proto3" json:"includeIPRanges,omitempty"`
	// Comma separated list of virtual interfaces whose inbound traffic (from VM) will be treated as outbound. By default, no interfaces are configured.
	KubevirtInterfaces string `protobuf:"bytes,17,opt,name=kubevirtInterfaces,proto3" json:"kubevirtInterfaces,omitempty"`
	// Log level for proxy, applies to gateways and sidecars. If left empty, "warning" is used. Expected values are: trace\|debug\|info\|warning\|error\|critical\|off
	LogLevel string `protobuf:"bytes,18,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	// Enables privileged securityContext for the istio-proxy container.
	//
	// See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	Privileged bool `protobuf:"varint,19,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// Sets the initial delay for readiness probes in seconds.
	ReadinessInitialDelaySeconds uint32 `protobuf:"varint,20,opt,name=readinessInitialDelaySeconds,proto3" json:"readinessInitialDelaySeconds,omitempty"`
	// Sets the interval between readiness probes in seconds.
	ReadinessPeriodSeconds uint32 `protobuf:"varint,21,opt,name=readinessPeriodSeconds,proto3" json:"readinessPeriodSeconds,omitempty"`
	// Sets the number of successive failed probes before indicating readiness failure.
	ReadinessFailureThreshold uint32 `protobuf:"varint,22,opt,name=readinessFailureThreshold,proto3" json:"readinessFailureThreshold,omitempty"`
	// Default port used for the Pilot agent's health checks.
	StatusPort uint32 `protobuf:"varint,23,opt,name=statusPort,proto3" json:"statusPort,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources            *v1.ResourceRequirements `protobuf:"bytes,24,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProxyConfig) Reset()         { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()    {}
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{40}
}

func (m *ProxyConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyConfig.Unmarshal(m, b)
}
func (m *ProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyConfig.Marshal(b, m, deterministic)
}
func (m *ProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyConfig.Merge(m, src)
}
func (m *ProxyConfig) XXX_Size() int {
	return xxx_messageInfo_ProxyConfig.Size(m)
}
func (m *ProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyConfig proto.InternalMessageInfo

func (m *ProxyConfig) GetAccessLogFile() string {
	if m != nil {
		return m.AccessLogFile
	}
	return ""
}

func (m *ProxyConfig) GetAccessLogFormat() string {
	if m != nil {
		return m.AccessLogFormat
	}
	return ""
}

func (m *ProxyConfig) GetClusterDomain() string {
	if m != nil {
		return m.ClusterDomain
	}
	return ""
}

func (m *ProxyConfig) GetComponentLogLevel() string {
	if m != nil {
		return m.ComponentLogLevel
	}
	return ""
}

func (m *ProxyConfig) GetConcurrency() uint32 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *ProxyConfig) GetDnsRefreshRate() *duration.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *ProxyConfig) GetEnableCoreDump() bool {
	if m != nil {
		return m.EnableCoreDump
	}
	return false
}

func (m *ProxyConfig) GetEnvoyMetricsService() *EnvoyMetricsConfig {
	if m != nil {
		return m.EnvoyMetricsService
	}
	return nil
}

func (m *ProxyConfig) GetEnvoyStatsd() *EnvoyMetricsConfig {
	if m != nil {
		return m.EnvoyStatsd
	}
	return nil
}

func (m *ProxyConfig) GetExcludeInboundPorts() string {
	if m != nil {
		return m.ExcludeInboundPorts
	}
	return ""
}

func (m *ProxyConfig) GetExcludeIPRanges() string {
	if m != nil {
		return m.ExcludeIPRanges
	}
	return ""
}

func (m *ProxyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ProxyConfig) GetIncludeInboundPorts() string {
	if m != nil {
		return m.IncludeInboundPorts
	}
	return ""
}

func (m *ProxyConfig) GetIncludeIPRanges() string {
	if m != nil {
		return m.IncludeIPRanges
	}
	return ""
}

func (m *ProxyConfig) GetKubevirtInterfaces() string {
	if m != nil {
		return m.KubevirtInterfaces
	}
	return ""
}

func (m *ProxyConfig) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *ProxyConfig) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *ProxyConfig) GetReadinessInitialDelaySeconds() uint32 {
	if m != nil {
		return m.ReadinessInitialDelaySeconds
	}
	return 0
}

func (m *ProxyConfig) GetReadinessPeriodSeconds() uint32 {
	if m != nil {
		return m.ReadinessPeriodSeconds
	}
	return 0
}

func (m *ProxyConfig) GetReadinessFailureThreshold() uint32 {
	if m != nil {
		return m.ReadinessFailureThreshold
	}
	return 0
}

func (m *ProxyConfig) GetStatusPort() uint32 {
	if m != nil {
		return m.StatusPort
	}
	return 0
}

func (m *ProxyConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

// Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
type ProxyInitConfig struct {
	// Specifies the image for the proxy_init container.
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProxyInitConfig) Reset()         { *m = ProxyInitConfig{} }
func (m *ProxyInitConfig) String() string { return proto.CompactTextString(m) }
func (*ProxyInitConfig) ProtoMessage()    {}
func (*ProxyInitConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{41}
}

func (m *ProxyInitConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyInitConfig.Unmarshal(m, b)
}
func (m *ProxyInitConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyInitConfig.Marshal(b, m, deterministic)
}
func (m *ProxyInitConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyInitConfig.Merge(m, src)
}
func (m *ProxyInitConfig) XXX_Size() int {
	return xxx_messageInfo_ProxyInitConfig.Size(m)
}
func (m *ProxyInitConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyInitConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyInitConfig proto.InternalMessageInfo

func (m *ProxyInitConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Configuration for K8s resource requests.
type ResourcesRequestsConfig struct {
	Cpu                  string   `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               string   `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcesRequestsConfig) Reset()         { *m = ResourcesRequestsConfig{} }
func (m *ResourcesRequestsConfig) String() string { return proto.CompactTextString(m) }
func (*ResourcesRequestsConfig) ProtoMessage()    {}
func (*ResourcesRequestsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{42}
}

func (m *ResourcesRequestsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcesRequestsConfig.Unmarshal(m, b)
}
func (m *ResourcesRequestsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcesRequestsConfig.Marshal(b, m, deterministic)
}
func (m *ResourcesRequestsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesRequestsConfig.Merge(m, src)
}
func (m *ResourcesRequestsConfig) XXX_Size() int {
	return xxx_messageInfo_ResourcesRequestsConfig.Size(m)
}
func (m *ResourcesRequestsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesRequestsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesRequestsConfig proto.InternalMessageInfo

func (m *ResourcesRequestsConfig) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *ResourcesRequestsConfig) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

// Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
type SDSConfig struct {
	// Controls whether the SecretDiscoveryService is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Specifies the Unix Domain Socket through which Envoy communicates with NodeAgent SDS to get key/cert for mTLS.
	UdsPath string `protobuf:"bytes,2,opt,name=udsPath,proto3" json:"udsPath,omitempty"`
	// Enables SDS use of k8s normal JWT to request for certificates.
	UseNormalJwt bool `protobuf:"varint,3,opt,name=useNormalJwt,proto3" json:"useNormalJwt,omitempty"`
	// Enables SDS use of trustworthy JWT to request for certificates.
	UseTrustworthyJwt    bool     `protobuf:"varint,4,opt,name=useTrustworthyJwt,proto3" json:"useTrustworthyJwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SDSConfig) Reset()         { *m = SDSConfig{} }
func (m *SDSConfig) String() string { return proto.CompactTextString(m) }
func (*SDSConfig) ProtoMessage()    {}
func (*SDSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{43}
}

func (m *SDSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SDSConfig.Unmarshal(m, b)
}
func (m *SDSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SDSConfig.Marshal(b, m, deterministic)
}
func (m *SDSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SDSConfig.Merge(m, src)
}
func (m *SDSConfig) XXX_Size() int {
	return xxx_messageInfo_SDSConfig.Size(m)
}
func (m *SDSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SDSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SDSConfig proto.InternalMessageInfo

func (m *SDSConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SDSConfig) GetUdsPath() string {
	if m != nil {
		return m.UdsPath
	}
	return ""
}

func (m *SDSConfig) GetUseNormalJwt() bool {
	if m != nil {
		return m.UseNormalJwt
	}
	return false
}

func (m *SDSConfig) GetUseTrustworthyJwt() bool {
	if m != nil {
		return m.UseTrustworthyJwt
	}
	return false
}

// Configuration for secret volume mounts.
//
// See https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets.
type SecretVolume struct {
	MountPath            string   `protobuf:"bytes,1,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SecretName           string   `protobuf:"bytes,3,opt,name=secretName,proto3" json:"secretName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretVolume) Reset()         { *m = SecretVolume{} }
func (m *SecretVolume) String() string { return proto.CompactTextString(m) }
func (*SecretVolume) ProtoMessage()    {}
func (*SecretVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{44}
}

func (m *SecretVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecretVolume.Unmarshal(m, b)
}
func (m *SecretVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecretVolume.Marshal(b, m, deterministic)
}
func (m *SecretVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretVolume.Merge(m, src)
}
func (m *SecretVolume) XXX_Size() int {
	return xxx_messageInfo_SecretVolume.Size(m)
}
func (m *SecretVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretVolume.DiscardUnknown(m)
}

var xxx_messageInfo_SecretVolume proto.InternalMessageInfo

func (m *SecretVolume) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *SecretVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretVolume) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

// Configuration for Citadel.
type SecurityConfig struct {
	// Controls whether Citadel is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Number of replicas in the Citadel Deployment.
	ReplicaCount uint32 `protobuf:"varint,2,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// Image name used for Citadel.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-citadel, docker.io/someuser:custom-citadel
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Controls whether self-signed CA is used for citadel to generate the certificate/key pair.
	//
	// Setting to false if you want to use your own root CA for Citade Deployment.
	SelfSigned bool `protobuf:"varint,4,opt,name=selfSigned,proto3" json:"selfSigned,omitempty"`
	// The trust domain corresponds to the trust root of a system
	// Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
	// Indicate the domain used in SPIFFE identity URL
	// The default depends on the environment.
	//   kubernetes: cluster.local
	//    else:  default dns domain
	TrustDomain string `protobuf:"bytes,5,opt,name=trustDomain,proto3" json:"trustDomain,omitempty"`
	// The DNS Certs specifies the customized DNS name and corresponding service account.
	//
	// Example:
	//   istio-pilot-service-account.istio-control: istio-pilot.istio-control.svc
	//   istio-galley-service-account.istio-config: istio-galley.istio-config.svc
	DnsCerts map[string]string `protobuf:"bytes,6,rep,name=dnsCerts,proto3" json:"dnsCerts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Controls whether the mesh-wide authentication policy is created or not.
	//
	// Setting to true creates the mesh-wide authentication policy with name "default".
	CreateMeshPolicy bool `protobuf:"varint,7,opt,name=createMeshPolicy,proto3" json:"createMeshPolicy,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector         map[string]interface{} `protobuf:"bytes,8,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SecurityConfig) Reset()         { *m = SecurityConfig{} }
func (m *SecurityConfig) String() string { return proto.CompactTextString(m) }
func (*SecurityConfig) ProtoMessage()    {}
func (*SecurityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{45}
}

func (m *SecurityConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityConfig.Unmarshal(m, b)
}
func (m *SecurityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityConfig.Marshal(b, m, deterministic)
}
func (m *SecurityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityConfig.Merge(m, src)
}
func (m *SecurityConfig) XXX_Size() int {
	return xxx_messageInfo_SecurityConfig.Size(m)
}
func (m *SecurityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityConfig proto.InternalMessageInfo

func (m *SecurityConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SecurityConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *SecurityConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SecurityConfig) GetSelfSigned() bool {
	if m != nil {
		return m.SelfSigned
	}
	return false
}

func (m *SecurityConfig) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *SecurityConfig) GetDnsCerts() map[string]string {
	if m != nil {
		return m.DnsCerts
	}
	return nil
}

func (m *SecurityConfig) GetCreateMeshPolicy() bool {
	if m != nil {
		return m.CreateMeshPolicy
	}
	return false
}

func (m *SecurityConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

// ServiceConfig is described in istio.io documentation.
type ServiceConfig struct {
	Annotations          map[string]interface{} `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
	ExternalPort         uint32                  `protobuf:"varint,2,opt,name=externalPort,proto3" json:"externalPort,omitempty"`
	Name                 string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                  `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ServiceConfig) Reset()         { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()    {}
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{46}
}

func (m *ServiceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConfig.Unmarshal(m, b)
}
func (m *ServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConfig.Marshal(b, m, deterministic)
}
func (m *ServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConfig.Merge(m, src)
}
func (m *ServiceConfig) XXX_Size() int {
	return xxx_messageInfo_ServiceConfig.Size(m)
}
func (m *ServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConfig proto.InternalMessageInfo

func (m *ServiceConfig) GetAnnotations() map[string]interface{} {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceConfig) GetExternalPort() uint32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *ServiceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// SidecarInjectorConfig is described in istio.io documentation.
type SidecarInjectorConfig struct {
	// Controls whether Sidecar Injector is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Enables sidecar auto-injection in namespaces by default.
	EnableNamespacesByDefault bool `protobuf:"varint,2,opt,name=enableNamespacesByDefault,proto3" json:"enableNamespacesByDefault,omitempty"`
	// Image name used for Sidecar Injector.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-sidecar_injector, docker.io/someuser:custom-sidecar_injector
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// K8s node selector. Each component can overwrite the default values by adding its node selector block in the relevant section and setting the desired values.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,10,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// Instructs Istio to not inject the sidecar on those pods, based on labels that are present in those pods.
	//
	// Annotations in the pods have higher precedence than the label selectors.
	// Order of evaluation: Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy.
	// See https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/#more-control-adding-exceptions
	NeverInjectSelector []map[string]interface{} `protobuf:"bytes,11,opt,name=neverInjectSelector,proto3" json:"neverInjectSelector,omitempty"`
	// See NeverInjectSelector.
	AlwaysInjectSelector []map[string]interface{} `protobuf:"bytes,12,opt,name=alwaysInjectSelector,proto3" json:"alwaysInjectSelector,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityLabelSelector []map[string]interface{} `protobuf:"bytes,13,opt,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See EgressGatewayConfig.
	PodAntiAffinityTermLabelSelector []map[string]interface{} `protobuf:"bytes,14,opt,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Number of replicas in the Sidecar Injector Deployment.
	ReplicaCount uint32 `protobuf:"varint,15,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	//  If true, webhook or istioctl injector will rewrite PodSpec for liveness health check to redirect request to sidecar. This makes liveness check work even when mTLS is enabled.
	RewriteAppHTTPProbe bool `protobuf:"varint,16,opt,name=rewriteAppHTTPProbe,proto3" json:"rewriteAppHTTPProbe,omitempty"`
	// Controls whether self-signed CA is used for Sidecar Injector to generate the certificate/key pair.
	//
	// Setting to false if you want to use your own root CA.
	SelfSigned           bool     `protobuf:"varint,17,opt,name=selfSigned,proto3" json:"selfSigned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SidecarInjectorConfig) Reset()         { *m = SidecarInjectorConfig{} }
func (m *SidecarInjectorConfig) String() string { return proto.CompactTextString(m) }
func (*SidecarInjectorConfig) ProtoMessage()    {}
func (*SidecarInjectorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{47}
}

func (m *SidecarInjectorConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SidecarInjectorConfig.Unmarshal(m, b)
}
func (m *SidecarInjectorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SidecarInjectorConfig.Marshal(b, m, deterministic)
}
func (m *SidecarInjectorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarInjectorConfig.Merge(m, src)
}
func (m *SidecarInjectorConfig) XXX_Size() int {
	return xxx_messageInfo_SidecarInjectorConfig.Size(m)
}
func (m *SidecarInjectorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarInjectorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarInjectorConfig proto.InternalMessageInfo

func (m *SidecarInjectorConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SidecarInjectorConfig) GetEnableNamespacesByDefault() bool {
	if m != nil {
		return m.EnableNamespacesByDefault
	}
	return false
}

func (m *SidecarInjectorConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SidecarInjectorConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetNeverInjectSelector() []map[string]interface{} {
	if m != nil {
		return m.NeverInjectSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetAlwaysInjectSelector() []map[string]interface{} {
	if m != nil {
		return m.AlwaysInjectSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetPodAntiAffinityLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityLabelSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetPodAntiAffinityTermLabelSelector() []map[string]interface{} {
	if m != nil {
		return m.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (m *SidecarInjectorConfig) GetReplicaCount() uint32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *SidecarInjectorConfig) GetRewriteAppHTTPProbe() bool {
	if m != nil {
		return m.RewriteAppHTTPProbe
	}
	return false
}

func (m *SidecarInjectorConfig) GetSelfSigned() bool {
	if m != nil {
		return m.SelfSigned
	}
	return false
}

// Configuration for stdio adapter in mixer, recommended for debug usage only.
type StdioMixerAdapterConfig struct {
	// Enable stdio adapter to output logs and metrics to local machine.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether to output a console-friendly or json-friendly format.
	OutputAsJson         bool     `protobuf:"varint,2,opt,name=outputAsJson,proto3" json:"outputAsJson,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StdioMixerAdapterConfig) Reset()         { *m = StdioMixerAdapterConfig{} }
func (m *StdioMixerAdapterConfig) String() string { return proto.CompactTextString(m) }
func (*StdioMixerAdapterConfig) ProtoMessage()    {}
func (*StdioMixerAdapterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{48}
}

func (m *StdioMixerAdapterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StdioMixerAdapterConfig.Unmarshal(m, b)
}
func (m *StdioMixerAdapterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StdioMixerAdapterConfig.Marshal(b, m, deterministic)
}
func (m *StdioMixerAdapterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StdioMixerAdapterConfig.Merge(m, src)
}
func (m *StdioMixerAdapterConfig) XXX_Size() int {
	return xxx_messageInfo_StdioMixerAdapterConfig.Size(m)
}
func (m *StdioMixerAdapterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StdioMixerAdapterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StdioMixerAdapterConfig proto.InternalMessageInfo

func (m *StdioMixerAdapterConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *StdioMixerAdapterConfig) GetOutputAsJson() bool {
	if m != nil {
		return m.OutputAsJson
	}
	return false
}

// Configuration for each of the supported tracers.
type TracerConfig struct {
	// Configuration for the datadog tracing service.
	Datadog *TracerDatadogConfig `protobuf:"bytes,1,opt,name=datadog,proto3" json:"datadog,omitempty"`
	// Configuration for the lightstep tracing service.
	Lightstep *TracerLightStepConfig `protobuf:"bytes,2,opt,name=lightstep,proto3" json:"lightstep,omitempty"`
	// Configuration for the zipkin tracing service.
	Zipkin               *TracerZipkinConfig `protobuf:"bytes,3,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TracerConfig) Reset()         { *m = TracerConfig{} }
func (m *TracerConfig) String() string { return proto.CompactTextString(m) }
func (*TracerConfig) ProtoMessage()    {}
func (*TracerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{49}
}

func (m *TracerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerConfig.Unmarshal(m, b)
}
func (m *TracerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerConfig.Marshal(b, m, deterministic)
}
func (m *TracerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerConfig.Merge(m, src)
}
func (m *TracerConfig) XXX_Size() int {
	return xxx_messageInfo_TracerConfig.Size(m)
}
func (m *TracerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerConfig proto.InternalMessageInfo

func (m *TracerConfig) GetDatadog() *TracerDatadogConfig {
	if m != nil {
		return m.Datadog
	}
	return nil
}

func (m *TracerConfig) GetLightstep() *TracerLightStepConfig {
	if m != nil {
		return m.Lightstep
	}
	return nil
}

func (m *TracerConfig) GetZipkin() *TracerZipkinConfig {
	if m != nil {
		return m.Zipkin
	}
	return nil
}

// Configuration for the datadog tracing service.
type TracerDatadogConfig struct {
	// Address in host:port format for reporting trace data to the Datadog agent.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerDatadogConfig) Reset()         { *m = TracerDatadogConfig{} }
func (m *TracerDatadogConfig) String() string { return proto.CompactTextString(m) }
func (*TracerDatadogConfig) ProtoMessage()    {}
func (*TracerDatadogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{50}
}

func (m *TracerDatadogConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerDatadogConfig.Unmarshal(m, b)
}
func (m *TracerDatadogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerDatadogConfig.Marshal(b, m, deterministic)
}
func (m *TracerDatadogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerDatadogConfig.Merge(m, src)
}
func (m *TracerDatadogConfig) XXX_Size() int {
	return xxx_messageInfo_TracerDatadogConfig.Size(m)
}
func (m *TracerDatadogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerDatadogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerDatadogConfig proto.InternalMessageInfo

func (m *TracerDatadogConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Configuration for the lightstep tracing service.
type TracerLightStepConfig struct {
	// Sets the lightstep satellite pool address in host:port format for reporting trace data.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Sets the lightstep access token.
	AccessToken string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Sets path to the file containing the cacert to use when verifying TLS.
	CacertPath string `protobuf:"bytes,3,opt,name=cacertPath,proto3" json:"cacertPath,omitempty"`
	// Enables lightstep secure connection.
	Secure               bool     `protobuf:"varint,4,opt,name=secure,proto3" json:"secure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerLightStepConfig) Reset()         { *m = TracerLightStepConfig{} }
func (m *TracerLightStepConfig) String() string { return proto.CompactTextString(m) }
func (*TracerLightStepConfig) ProtoMessage()    {}
func (*TracerLightStepConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{51}
}

func (m *TracerLightStepConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerLightStepConfig.Unmarshal(m, b)
}
func (m *TracerLightStepConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerLightStepConfig.Marshal(b, m, deterministic)
}
func (m *TracerLightStepConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerLightStepConfig.Merge(m, src)
}
func (m *TracerLightStepConfig) XXX_Size() int {
	return xxx_messageInfo_TracerLightStepConfig.Size(m)
}
func (m *TracerLightStepConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerLightStepConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerLightStepConfig proto.InternalMessageInfo

func (m *TracerLightStepConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TracerLightStepConfig) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TracerLightStepConfig) GetCacertPath() string {
	if m != nil {
		return m.CacertPath
	}
	return ""
}

func (m *TracerLightStepConfig) GetSecure() bool {
	if m != nil {
		return m.Secure
	}
	return false
}

// Configuration for the zipkin tracing service.
type TracerZipkinConfig struct {
	// Address of zipkin instance in host:port format for reporting trace data.
	//
	// Example: <zipkin-collector-service>.<zipkin-collector-namespace>:941
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerZipkinConfig) Reset()         { *m = TracerZipkinConfig{} }
func (m *TracerZipkinConfig) String() string { return proto.CompactTextString(m) }
func (*TracerZipkinConfig) ProtoMessage()    {}
func (*TracerZipkinConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{52}
}

func (m *TracerZipkinConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerZipkinConfig.Unmarshal(m, b)
}
func (m *TracerZipkinConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerZipkinConfig.Marshal(b, m, deterministic)
}
func (m *TracerZipkinConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerZipkinConfig.Merge(m, src)
}
func (m *TracerZipkinConfig) XXX_Size() int {
	return xxx_messageInfo_TracerZipkinConfig.Size(m)
}
func (m *TracerZipkinConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerZipkinConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracerZipkinConfig proto.InternalMessageInfo

func (m *TracerZipkinConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Configurations for different tracing system to be installed.
type TracingConfig struct {
	// Enables tracing systems installation.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls legacy k8s ingress for addon tracing components.
	Ingress *TracingIngressConfig `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// Defines Configuration for addon Jaeger tracing.
	Jaeger *TracingJaegerConfig `protobuf:"bytes,3,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	NodeSelector map[string]interface{} `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// Configures which tracing system to be installed.
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// Controls K8s service for addon tracing components.
	Service *ServiceConfig `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Defines Configuration for addon Zipkin tracing.
	Zipkin               *TracingZipkinConfig `protobuf:"bytes,7,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TracingConfig) Reset()         { *m = TracingConfig{} }
func (m *TracingConfig) String() string { return proto.CompactTextString(m) }
func (*TracingConfig) ProtoMessage()    {}
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{53}
}

func (m *TracingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingConfig.Unmarshal(m, b)
}
func (m *TracingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingConfig.Marshal(b, m, deterministic)
}
func (m *TracingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingConfig.Merge(m, src)
}
func (m *TracingConfig) XXX_Size() int {
	return xxx_messageInfo_TracingConfig.Size(m)
}
func (m *TracingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingConfig proto.InternalMessageInfo

func (m *TracingConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *TracingConfig) GetIngress() *TracingIngressConfig {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *TracingConfig) GetJaeger() *TracingJaegerConfig {
	if m != nil {
		return m.Jaeger
	}
	return nil
}

func (m *TracingConfig) GetNodeSelector() map[string]interface{} {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *TracingConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *TracingConfig) GetService() *ServiceConfig {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *TracingConfig) GetZipkin() *TracingZipkinConfig {
	if m != nil {
		return m.Zipkin
	}
	return nil
}

// Controls legacy k8s ingress for addon tracing components.
type TracingIngressConfig struct {
	// Enables k8s ingress for addon tracing components.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracingIngressConfig) Reset()         { *m = TracingIngressConfig{} }
func (m *TracingIngressConfig) String() string { return proto.CompactTextString(m) }
func (*TracingIngressConfig) ProtoMessage()    {}
func (*TracingIngressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{54}
}

func (m *TracingIngressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingIngressConfig.Unmarshal(m, b)
}
func (m *TracingIngressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingIngressConfig.Marshal(b, m, deterministic)
}
func (m *TracingIngressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingIngressConfig.Merge(m, src)
}
func (m *TracingIngressConfig) XXX_Size() int {
	return xxx_messageInfo_TracingIngressConfig.Size(m)
}
func (m *TracingIngressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingIngressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingIngressConfig proto.InternalMessageInfo

func (m *TracingIngressConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Configuration for addon Jaeger tracing.
type TracingJaegerConfig struct {
	// Image hub for Jaeger tracing deployment.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for Jaeger tracing deployment.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Configures Jaeger in-memory storage setting.
	Memory               *TracingJaegerMemoryConfig `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TracingJaegerConfig) Reset()         { *m = TracingJaegerConfig{} }
func (m *TracingJaegerConfig) String() string { return proto.CompactTextString(m) }
func (*TracingJaegerConfig) ProtoMessage()    {}
func (*TracingJaegerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{55}
}

func (m *TracingJaegerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingJaegerConfig.Unmarshal(m, b)
}
func (m *TracingJaegerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingJaegerConfig.Marshal(b, m, deterministic)
}
func (m *TracingJaegerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingJaegerConfig.Merge(m, src)
}
func (m *TracingJaegerConfig) XXX_Size() int {
	return xxx_messageInfo_TracingJaegerConfig.Size(m)
}
func (m *TracingJaegerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingJaegerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingJaegerConfig proto.InternalMessageInfo

func (m *TracingJaegerConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *TracingJaegerConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TracingJaegerConfig) GetMemory() *TracingJaegerMemoryConfig {
	if m != nil {
		return m.Memory
	}
	return nil
}

// Configuration for Jaeger in-memory storage setting.
type TracingJaegerMemoryConfig struct {
	// Set limit of the amount of traces stored in memory for Jaeger
	MaxTraces            uint32   `protobuf:"varint,1,opt,name=max_traces,json=maxTraces,proto3" json:"max_traces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracingJaegerMemoryConfig) Reset()         { *m = TracingJaegerMemoryConfig{} }
func (m *TracingJaegerMemoryConfig) String() string { return proto.CompactTextString(m) }
func (*TracingJaegerMemoryConfig) ProtoMessage()    {}
func (*TracingJaegerMemoryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{56}
}

func (m *TracingJaegerMemoryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingJaegerMemoryConfig.Unmarshal(m, b)
}
func (m *TracingJaegerMemoryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingJaegerMemoryConfig.Marshal(b, m, deterministic)
}
func (m *TracingJaegerMemoryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingJaegerMemoryConfig.Merge(m, src)
}
func (m *TracingJaegerMemoryConfig) XXX_Size() int {
	return xxx_messageInfo_TracingJaegerMemoryConfig.Size(m)
}
func (m *TracingJaegerMemoryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingJaegerMemoryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingJaegerMemoryConfig proto.InternalMessageInfo

func (m *TracingJaegerMemoryConfig) GetMaxTraces() uint32 {
	if m != nil {
		return m.MaxTraces
	}
	return 0
}

// Configuration for Zipkin.
type TracingZipkinConfig struct {
	// Image hub for Zipkin tracing deployment.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// Image tag for Zipkin tracing deployment.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// InitialDelaySeconds of livenessProbe for Zipkin deployment
	ProbeStartupDelay uint32 `protobuf:"varint,3,opt,name=probeStartupDelay,proto3" json:"probeStartupDelay,omitempty"`
	// Container port for Zipkin deployment
	QueryPort uint32 `protobuf:"varint,4,opt,name=queryPort,proto3" json:"queryPort,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *v1.ResourceRequirements `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	// Configure java heap opts for Zipkin deployment
	JavaOptsHeap string `protobuf:"bytes,6,opt,name=javaOptsHeap,proto3" json:"javaOptsHeap,omitempty"`
	// Configures number of max spans to keep in Zipkin memory storage.
	//
	// Example: A safe estimate is 1K of memory per span (each span with 2 annotations + 1 binary annotation), plus 100 MB for a safety buffer
	MaxSpans uint32 `protobuf:"varint,7,opt,name=maxSpans,proto3" json:"maxSpans,omitempty"`
	// Configures GC values of JAVA_OPTS for Zipkin deployment
	Node                 *TracingZipkinNodeConfig `protobuf:"bytes,8,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TracingZipkinConfig) Reset()         { *m = TracingZipkinConfig{} }
func (m *TracingZipkinConfig) String() string { return proto.CompactTextString(m) }
func (*TracingZipkinConfig) ProtoMessage()    {}
func (*TracingZipkinConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{57}
}

func (m *TracingZipkinConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingZipkinConfig.Unmarshal(m, b)
}
func (m *TracingZipkinConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingZipkinConfig.Marshal(b, m, deterministic)
}
func (m *TracingZipkinConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingZipkinConfig.Merge(m, src)
}
func (m *TracingZipkinConfig) XXX_Size() int {
	return xxx_messageInfo_TracingZipkinConfig.Size(m)
}
func (m *TracingZipkinConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingZipkinConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingZipkinConfig proto.InternalMessageInfo

func (m *TracingZipkinConfig) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *TracingZipkinConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TracingZipkinConfig) GetProbeStartupDelay() uint32 {
	if m != nil {
		return m.ProbeStartupDelay
	}
	return 0
}

func (m *TracingZipkinConfig) GetQueryPort() uint32 {
	if m != nil {
		return m.QueryPort
	}
	return 0
}

func (m *TracingZipkinConfig) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *TracingZipkinConfig) GetJavaOptsHeap() string {
	if m != nil {
		return m.JavaOptsHeap
	}
	return ""
}

func (m *TracingZipkinConfig) GetMaxSpans() uint32 {
	if m != nil {
		return m.MaxSpans
	}
	return 0
}

func (m *TracingZipkinConfig) GetNode() *TracingZipkinNodeConfig {
	if m != nil {
		return m.Node
	}
	return nil
}

// Configuration for GC values of JAVA_OPTS for Zipkin deployment
type TracingZipkinNodeConfig struct {
	// Configures -XX:ConcGCThreads value of JAVA_OPTS for Zipkin deployment
	Cpus                 uint32   `protobuf:"varint,1,opt,name=cpus,proto3" json:"cpus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracingZipkinNodeConfig) Reset()         { *m = TracingZipkinNodeConfig{} }
func (m *TracingZipkinNodeConfig) String() string { return proto.CompactTextString(m) }
func (*TracingZipkinNodeConfig) ProtoMessage()    {}
func (*TracingZipkinNodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{58}
}

func (m *TracingZipkinNodeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracingZipkinNodeConfig.Unmarshal(m, b)
}
func (m *TracingZipkinNodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracingZipkinNodeConfig.Marshal(b, m, deterministic)
}
func (m *TracingZipkinNodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracingZipkinNodeConfig.Merge(m, src)
}
func (m *TracingZipkinNodeConfig) XXX_Size() int {
	return xxx_messageInfo_TracingZipkinNodeConfig.Size(m)
}
func (m *TracingZipkinNodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracingZipkinNodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracingZipkinNodeConfig proto.InternalMessageInfo

func (m *TracingZipkinNodeConfig) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

type Values struct {
	Certmanager            *CertManagerConfig     `protobuf:"bytes,1,opt,name=certmanager,proto3" json:"certmanager,omitempty"`
	IstioCni               *CNIConfig             `protobuf:"bytes,2,opt,name=istio_cni,json=istioCni,proto3" json:"istio_cni,omitempty"`
	Istiocoredns           *CoreDNSConfig         `protobuf:"bytes,3,opt,name=istiocoredns,proto3" json:"istiocoredns,omitempty"`
	Galley                 *GalleyConfig          `protobuf:"bytes,4,opt,name=galley,proto3" json:"galley,omitempty"`
	Gateways               *GatewaysConfig        `protobuf:"bytes,5,opt,name=gateways,proto3" json:"gateways,omitempty"`
	Global                 *GlobalConfig          `protobuf:"bytes,6,opt,name=global,proto3" json:"global,omitempty"`
	Mixer                  *MixerConfig           `protobuf:"bytes,7,opt,name=mixer,proto3" json:"mixer,omitempty"`
	Nodeagent              *NodeAgentConfig       `protobuf:"bytes,8,opt,name=nodeagent,proto3" json:"nodeagent,omitempty"`
	Pilot                  *PilotConfig           `protobuf:"bytes,9,opt,name=pilot,proto3" json:"pilot,omitempty"`
	Prometheus             *PrometheusConfig      `protobuf:"bytes,10,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	Security               *SecurityConfig        `protobuf:"bytes,11,opt,name=security,proto3" json:"security,omitempty"`
	SidecarInjectorWebhook *SidecarInjectorConfig `protobuf:"bytes,12,opt,name=sidecarInjectorWebhook,proto3" json:"sidecarInjectorWebhook,omitempty"`
	Tracing                *TracingConfig         `protobuf:"bytes,13,opt,name=tracing,proto3" json:"tracing,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}               `json:"-"`
	XXX_unrecognized       []byte                 `json:"-"`
	XXX_sizecache          int32                  `json:"-"`
}

func (m *Values) Reset()         { *m = Values{} }
func (m *Values) String() string { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()    {}
func (*Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{59}
}

func (m *Values) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Values.Unmarshal(m, b)
}
func (m *Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Values.Marshal(b, m, deterministic)
}
func (m *Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Values.Merge(m, src)
}
func (m *Values) XXX_Size() int {
	return xxx_messageInfo_Values.Size(m)
}
func (m *Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Values proto.InternalMessageInfo

func (m *Values) GetCertmanager() *CertManagerConfig {
	if m != nil {
		return m.Certmanager
	}
	return nil
}

func (m *Values) GetIstioCni() *CNIConfig {
	if m != nil {
		return m.IstioCni
	}
	return nil
}

func (m *Values) GetIstiocoredns() *CoreDNSConfig {
	if m != nil {
		return m.Istiocoredns
	}
	return nil
}

func (m *Values) GetGalley() *GalleyConfig {
	if m != nil {
		return m.Galley
	}
	return nil
}

func (m *Values) GetGateways() *GatewaysConfig {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *Values) GetGlobal() *GlobalConfig {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *Values) GetMixer() *MixerConfig {
	if m != nil {
		return m.Mixer
	}
	return nil
}

func (m *Values) GetNodeagent() *NodeAgentConfig {
	if m != nil {
		return m.Nodeagent
	}
	return nil
}

func (m *Values) GetPilot() *PilotConfig {
	if m != nil {
		return m.Pilot
	}
	return nil
}

func (m *Values) GetPrometheus() *PrometheusConfig {
	if m != nil {
		return m.Prometheus
	}
	return nil
}

func (m *Values) GetSecurity() *SecurityConfig {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *Values) GetSidecarInjectorWebhook() *SidecarInjectorConfig {
	if m != nil {
		return m.SidecarInjectorWebhook
	}
	return nil
}

func (m *Values) GetTracing() *TracingConfig {
	if m != nil {
		return m.Tracing
	}
	return nil
}



// ZeroVPNConfig enables cross-cluster access using SNI matching.
type ZeroVPNConfig struct {
	// Controls whether ZeroVPN is enabled.
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Suffix               string   `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeroVPNConfig) Reset()         { *m = ZeroVPNConfig{} }
func (m *ZeroVPNConfig) String() string { return proto.CompactTextString(m) }
func (*ZeroVPNConfig) ProtoMessage()    {}
func (*ZeroVPNConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a739174c5795eddf, []int{62}
}

func (m *ZeroVPNConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZeroVPNConfig.Unmarshal(m, b)
}
func (m *ZeroVPNConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZeroVPNConfig.Marshal(b, m, deterministic)
}
func (m *ZeroVPNConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroVPNConfig.Merge(m, src)
}
func (m *ZeroVPNConfig) XXX_Size() int {
	return xxx_messageInfo_ZeroVPNConfig.Size(m)
}
func (m *ZeroVPNConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroVPNConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroVPNConfig proto.InternalMessageInfo

func (m *ZeroVPNConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ZeroVPNConfig) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func init() {
	proto.RegisterEnum("values.LoadSheddingConfigMode", LoadSheddingConfigMode_name, LoadSheddingConfigMode_value)
	proto.RegisterEnum("values.OutboundTrafficPolicyConfigMode", OutboundTrafficPolicyConfigMode_name, OutboundTrafficPolicyConfigMode_value)
	proto.RegisterEnum("values.PilotIngressConfigIngressControllerMode", PilotIngressConfigIngressControllerMode_name, PilotIngressConfigIngressControllerMode_value)
	proto.RegisterEnum("values.ProxyConfigAccessLogEncoding", ProxyConfigAccessLogEncoding_name, ProxyConfigAccessLogEncoding_value)
	proto.RegisterEnum("values.ProxyConfigAutoInject", ProxyConfigAutoInject_name, ProxyConfigAutoInject_value)
	proto.RegisterEnum("values.ProxyConfigTracer", ProxyConfigTracer_name, ProxyConfigTracer_value)
	proto.RegisterType((*AddonIngressConfig)(nil), "values.AddonIngressConfig")
	proto.RegisterType((*ArchConfig)(nil), "values.ArchConfig")
	proto.RegisterType((*CNIConfig)(nil), "values.CNIConfig")
	proto.RegisterType((*CPUTargetUtilizationConfig)(nil), "values.CPUTargetUtilizationConfig")
	proto.RegisterType((*CertManagerConfig)(nil), "values.CertManagerConfig")
	proto.RegisterType((*CoreDNSConfig)(nil), "values.CoreDNSConfig")
	proto.RegisterType((*DefaultPodDisruptionBudgetConfig)(nil), "values.DefaultPodDisruptionBudgetConfig")
	proto.RegisterType((*DefaultResourcesConfig)(nil), "values.DefaultResourcesConfig")
	proto.RegisterType((*EgressGatewayConfig)(nil), "values.EgressGatewayConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.EgressGatewayConfig.EnvEntry")
	proto.RegisterType((*EnvoyMetricsConfig)(nil), "values.EnvoyMetricsConfig")
	proto.RegisterType((*GalleyConfig)(nil), "values.GalleyConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.GalleyConfig.MeshEntry")
	proto.RegisterType((*GatewayLabelsConfig)(nil), "values.GatewayLabelsConfig")
	proto.RegisterType((*GatewaysConfig)(nil), "values.GatewaysConfig")
	proto.RegisterType((*GlobalConfig)(nil), "values.GlobalConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.GlobalConfig.LocalityLbSettingEntry")
	proto.RegisterType((*GlobalLoggingConfig)(nil), "values.GlobalLoggingConfig")
	proto.RegisterType((*IngressGatewayConfig)(nil), "values.IngressGatewayConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.IngressGatewayConfig.EnvEntry")
	proto.RegisterType((*IngressGatewaySdsConfig)(nil), "values.IngressGatewaySdsConfig")
	proto.RegisterType((*IngressGatewayZvpnConfig)(nil), "values.IngressGatewayZvpnConfig")
	proto.RegisterType((*KubernetesEnvMixerAdapterConfig)(nil), "values.KubernetesEnvMixerAdapterConfig")
	proto.RegisterType((*KubernetesIngressConfig)(nil), "values.KubernetesIngressConfig")
	proto.RegisterType((*LoadSheddingConfig)(nil), "values.LoadSheddingConfig")
	proto.RegisterType((*MTLSConfig)(nil), "values.MTLSConfig")
	proto.RegisterType((*MeshExpansionConfig)(nil), "values.MeshExpansionConfig")
	proto.RegisterType((*MixerAdaptersConfig)(nil), "values.MixerAdaptersConfig")
	proto.RegisterType((*MixerConfig)(nil), "values.MixerConfig")
	proto.RegisterType((*MixerPolicyConfig)(nil), "values.MixerPolicyConfig")
	proto.RegisterType((*MixerTelemetryConfig)(nil), "values.MixerTelemetryConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.MixerTelemetryConfig.EnvEntry")
	proto.RegisterType((*MultiClusterConfig)(nil), "values.MultiClusterConfig")
	proto.RegisterType((*NodeAgentConfig)(nil), "values.NodeAgentConfig")
	proto.RegisterType((*OutboundTrafficPolicyConfig)(nil), "values.OutboundTrafficPolicyConfig")
	proto.RegisterType((*PilotConfig)(nil), "values.PilotConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.PilotConfig.EnvEntry")
	proto.RegisterType((*PilotIngressConfig)(nil), "values.PilotIngressConfig")
	proto.RegisterType((*PilotPolicyConfig)(nil), "values.PilotPolicyConfig")
	proto.RegisterType((*PilotTelemetryConfig)(nil), "values.PilotTelemetryConfig")
	proto.RegisterType((*PortsConfig)(nil), "values.PortsConfig")
	proto.RegisterType((*PrometheusConfig)(nil), "values.PrometheusConfig")
	proto.RegisterType((*PrometheusMixerAdapterConfig)(nil), "values.PrometheusMixerAdapterConfig")
	proto.RegisterType((*PrometheusSecurityConfig)(nil), "values.PrometheusSecurityConfig")
	proto.RegisterType((*PrometheusServiceConfig)(nil), "values.PrometheusServiceConfig")
	proto.RegisterType((*PrometheusServiceNodePortConfig)(nil), "values.PrometheusServiceNodePortConfig")
	proto.RegisterType((*ProxyConfig)(nil), "values.ProxyConfig")
	proto.RegisterType((*ProxyInitConfig)(nil), "values.ProxyInitConfig")
	proto.RegisterType((*ResourcesRequestsConfig)(nil), "values.ResourcesRequestsConfig")
	proto.RegisterType((*SDSConfig)(nil), "values.SDSConfig")
	proto.RegisterType((*SecretVolume)(nil), "values.SecretVolume")
	proto.RegisterType((*SecurityConfig)(nil), "values.SecurityConfig")
	proto.RegisterMapType((map[string]string)(nil), "values.SecurityConfig.DnsCertsEntry")
	proto.RegisterType((*ServiceConfig)(nil), "values.ServiceConfig")
	proto.RegisterType((*SidecarInjectorConfig)(nil), "values.SidecarInjectorConfig")
	proto.RegisterType((*StdioMixerAdapterConfig)(nil), "values.StdioMixerAdapterConfig")
	proto.RegisterType((*TracerConfig)(nil), "values.TracerConfig")
	proto.RegisterType((*TracerDatadogConfig)(nil), "values.TracerDatadogConfig")
	proto.RegisterType((*TracerLightStepConfig)(nil), "values.TracerLightStepConfig")
	proto.RegisterType((*TracerZipkinConfig)(nil), "values.TracerZipkinConfig")
	proto.RegisterType((*TracingConfig)(nil), "values.TracingConfig")
	proto.RegisterType((*TracingIngressConfig)(nil), "values.TracingIngressConfig")
	proto.RegisterType((*TracingJaegerConfig)(nil), "values.TracingJaegerConfig")
	proto.RegisterType((*TracingJaegerMemoryConfig)(nil), "values.TracingJaegerMemoryConfig")
	proto.RegisterType((*TracingZipkinConfig)(nil), "values.TracingZipkinConfig")
	proto.RegisterType((*TracingZipkinNodeConfig)(nil), "values.TracingZipkinNodeConfig")
	proto.RegisterType((*Values)(nil), "values.Values")
	proto.RegisterType((*ZeroVPNConfig)(nil), "values.ZeroVPNConfig")
}

func init() {
	proto.RegisterFile("pkg/apis/istio/v1alpha2/values/values_types.proto", fileDescriptor_a739174c5795eddf)
}

var fileDescriptor_a739174c5795eddf = []byte{
	// 4494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3c, 0x49, 0x73, 0xdb, 0xc8,
	0x7a, 0x43, 0x2d, 0x14, 0xf9, 0x51, 0xd4, 0xd2, 0xd4, 0x02, 0xcb, 0x1a, 0x5b, 0x0f, 0xb3, 0x79,
	0xde, 0x9b, 0x47, 0x79, 0x9f, 0xf1, 0x92, 0x97, 0x91, 0x25, 0xd9, 0x96, 0x47, 0x0b, 0x0b, 0xa4,
	0x3d, 0xcf, 0xbe, 0x38, 0x2d, 0xa0, 0x45, 0x61, 0x04, 0x02, 0x30, 0xba, 0x41, 0x4b, 0x53, 0xf9,
	0x03, 0x2f, 0x39, 0xe5, 0x90, 0xca, 0x21, 0x95, 0xaa, 0x1c, 0x52, 0xef, 0x90, 0x1f, 0x90, 0xdc,
	0x93, 0x43, 0xce, 0x39, 0xa6, 0x2a, 0x39, 0xe6, 0x90, 0x1f, 0x90, 0x7b, 0xaa, 0x17, 0x80, 0x00,
	0x08, 0x92, 0x92, 0x9e, 0x67, 0x92, 0x9c, 0xc4, 0xfe, 0xfa, 0xfb, 0xbe, 0x5e, 0xbf, 0xb5, 0x3f,
	0x08, 0x6e, 0xf9, 0x27, 0xed, 0x75, 0xec, 0xdb, 0x74, 0xdd, 0xa6, 0xcc, 0xf6, 0xd6, 0xbb, 0xb7,
	0xb0, 0xe3, 0x1f, 0xe3, 0xdb, 0xeb, 0x5d, 0xec, 0x84, 0x84, 0xaa, 0x3f, 0x6f, 0xd9, 0x99, 0x4f,
	0x68, 0xdd, 0x0f, 0x3c, 0xe6, 0xa1, 0xa2, 0x84, 0xad, 0x5c, 0x6b, 0x7b, 0x5e, 0xdb, 0x21, 0xeb,
	0x02, 0x7a, 0x18, 0x1e, 0xad, 0x5b, 0x61, 0x80, 0x99, 0xed, 0xb9, 0x12, 0x6f, 0x45, 0x3f, 0xf9,
	0x86, 0xd6, 0x6d, 0x8f, 0x73, 0x5f, 0x37, 0xbd, 0x80, 0xac, 0x77, 0x6f, 0xad, 0xb7, 0x89, 0x4b,
	0x02, 0xcc, 0x88, 0x25, 0x71, 0xf4, 0x2d, 0x40, 0x1b, 0x96, 0xe5, 0xb9, 0x3b, 0x6e, 0x3b, 0x20,
	0x94, 0x6e, 0x7a, 0xee, 0x91, 0xdd, 0x46, 0x1a, 0x4c, 0x11, 0x17, 0x1f, 0x3a, 0xc4, 0xd2, 0x0a,
	0x6b, 0x85, 0x1b, 0x25, 0x23, 0x6a, 0xa2, 0x05, 0x98, 0x3c, 0xf6, 0x28, 0xa3, 0xda, 0xd8, 0xda,
	0xf8, 0x8d, 0xb2, 0x21, 0x1b, 0xba, 0x01, 0xb0, 0x11, 0x98, 0xc7, 0x8a, 0x7a, 0x01, 0x26, 0x71,
	0xc7, 0xba, 0x7f, 0x57, 0xd0, 0x56, 0x0d, 0xd9, 0xe0, 0x3c, 0x7d, 0xdf, 0xbc, 0x7f, 0xd7, 0x21,
	0xda, 0x98, 0x80, 0x47, 0x4d, 0x8e, 0x4f, 0xef, 0x3c, 0xb8, 0x79, 0xaa, 0x8d, 0x4b, 0x7c, 0xd1,
	0xd0, 0x3f, 0x83, 0xf2, 0xe6, 0xfe, 0xce, 0xa8, 0x09, 0xe9, 0xbf, 0x85, 0x95, 0xcd, 0xc6, 0xcb,
	0x16, 0x0e, 0xda, 0x84, 0xbd, 0x64, 0xb6, 0x63, 0xff, 0x28, 0xb6, 0x40, 0xd1, 0x3d, 0x04, 0x8d,
	0x89, 0xae, 0x8d, 0x2e, 0x09, 0x70, 0x9b, 0x24, 0x30, 0x04, 0xa3, 0x49, 0x63, 0x60, 0xbf, 0xfe,
	0x1f, 0x05, 0x98, 0xdf, 0x24, 0x01, 0xdb, 0xc3, 0x2e, 0x6e, 0x93, 0x60, 0xe4, 0xd6, 0xcc, 0xc1,
	0xf8, 0x71, 0x78, 0x28, 0x16, 0x57, 0x36, 0xf8, 0x4f, 0x0e, 0x61, 0xb8, 0x2d, 0x96, 0x55, 0x36,
	0xf8, 0x4f, 0xf4, 0x04, 0xa6, 0x5d, 0xcf, 0x22, 0x4d, 0xe2, 0x10, 0x93, 0x79, 0x81, 0x36, 0xb1,
	0x56, 0xb8, 0x51, 0xb9, 0x7d, 0xad, 0x2e, 0x4f, 0xb4, 0xde, 0x3a, 0xf3, 0xc9, 0x1e, 0xf6, 0x9b,
	0x2c, 0xb0, 0xdd, 0xf6, 0x8e, 0xcb, 0x48, 0x70, 0x84, 0x4d, 0x62, 0xa4, 0x68, 0xd0, 0x53, 0x28,
	0x07, 0x84, 0x7a, 0x61, 0x60, 0x12, 0xaa, 0x4d, 0x0a, 0x06, 0x37, 0xea, 0xf2, 0xa8, 0xeb, 0xd8,
	0xb7, 0xeb, 0xfc, 0xa8, 0xeb, 0xdd, 0x5b, 0x75, 0x43, 0x21, 0x19, 0xe4, 0x5d, 0x68, 0x07, 0xa4,
	0x43, 0x5c, 0x46, 0x8d, 0x1e, 0xa9, 0xfe, 0x9f, 0x05, 0xa8, 0x6e, 0x7a, 0x01, 0xd9, 0xda, 0x6f,
	0x8e, 0x5c, 0x9b, 0x0e, 0xd3, 0xa6, 0x44, 0xdd, 0xe9, 0xe0, 0x36, 0x51, 0x8b, 0x4c, 0xc1, 0x50,
	0x1d, 0x90, 0x6a, 0x37, 0x9c, 0xb0, 0x6d, 0xbb, 0x12, 0x53, 0x2e, 0x3e, 0xa7, 0xe7, 0x83, 0xec,
	0x85, 0x0e, 0xd3, 0x01, 0xf1, 0x1d, 0xdb, 0xc4, 0x9b, 0x5e, 0xe8, 0x32, 0xb1, 0x1d, 0x55, 0x23,
	0x05, 0xd3, 0x1f, 0xc3, 0xda, 0x16, 0x39, 0xc2, 0xa1, 0xc3, 0x1a, 0x9e, 0xb5, 0x65, 0xd3, 0x20,
	0xf4, 0xf9, 0xf9, 0x3e, 0x09, 0xad, 0x36, 0x61, 0x23, 0xef, 0xd7, 0x4b, 0x58, 0x52, 0xd4, 0xd1,
	0x7e, 0x46, 0x42, 0xf2, 0x08, 0x4a, 0x01, 0x79, 0x17, 0x12, 0x2e, 0x0d, 0x05, 0x31, 0xf7, 0xeb,
	0xd1, 0xdc, 0x63, 0x54, 0x43, 0x21, 0x48, 0x12, 0x23, 0x26, 0xd0, 0x7f, 0x5f, 0x82, 0xda, 0xb6,
	0x10, 0xb9, 0x67, 0x98, 0x91, 0xf7, 0xf8, 0x4c, 0x31, 0xfd, 0x25, 0xcc, 0xe1, 0x90, 0x79, 0xd4,
	0xc4, 0x0e, 0xd9, 0x4e, 0xcd, 0xa8, 0x0f, 0xce, 0x17, 0x1f, 0xc3, 0xf6, 0xf0, 0xa9, 0x12, 0xab,
	0x14, 0x2c, 0x8d, 0x63, 0xbb, 0x4a, 0xc4, 0x52, 0x30, 0x74, 0x17, 0xc6, 0x4d, 0x3f, 0x54, 0x57,
	0x49, 0x8f, 0xd6, 0x30, 0x58, 0xaa, 0x0c, 0x8e, 0x9e, 0xdc, 0xb2, 0xa9, 0xf4, 0x65, 0xb9, 0x0f,
	0xe3, 0xc4, 0xed, 0x6a, 0xa5, 0xb5, 0xf1, 0x1b, 0x95, 0xdb, 0x9f, 0x46, 0xfc, 0x72, 0x56, 0x5b,
	0xdf, 0x76, 0xbb, 0xdb, 0x2e, 0x0b, 0xce, 0x0c, 0x4e, 0x80, 0xee, 0x40, 0xd1, 0xc1, 0x87, 0xc4,
	0xa1, 0x5a, 0x59, 0x4c, 0xe5, 0x6a, 0x44, 0xaa, 0x88, 0x76, 0x45, 0xa7, 0x9a, 0x83, 0x42, 0xed,
	0xbb, 0x45, 0x70, 0x29, 0x89, 0x9a, 0xf1, 0x3d, 0x6b, 0xc3, 0x75, 0x3d, 0x26, 0x96, 0x49, 0xb5,
	0xca, 0xb9, 0xb8, 0x64, 0xa8, 0x90, 0x0d, 0xab, 0x02, 0xc2, 0xec, 0x8d, 0xa3, 0x23, 0xdb, 0xb5,
	0x99, 0x9c, 0x72, 0x3c, 0xb7, 0x69, 0xc1, 0xf5, 0xb3, 0x24, 0xd7, 0xa6, 0x63, 0x9b, 0xe4, 0xe0,
	0x28, 0x87, 0xf9, 0x50, 0x56, 0xe8, 0x1d, 0xac, 0x65, 0xfa, 0x5b, 0x24, 0xe8, 0xa4, 0x87, 0xab,
	0x5e, 0x64, 0xb8, 0x91, 0xec, 0xd0, 0x97, 0x30, 0xe9, 0x7b, 0x01, 0xa3, 0xda, 0x8c, 0x38, 0xd8,
	0x5a, 0xc4, 0xb7, 0xc1, 0x81, 0xea, 0x54, 0x24, 0x46, 0x5a, 0x45, 0xcd, 0x5e, 0x5a, 0x45, 0xa1,
	0x87, 0x50, 0xa5, 0xc4, 0x0c, 0x08, 0x7b, 0xe5, 0x39, 0x61, 0x87, 0x50, 0x6d, 0x4e, 0x0c, 0xbd,
	0x10, 0x0d, 0xdd, 0x4c, 0x74, 0x1a, 0x69, 0x54, 0xb4, 0x0f, 0x88, 0x92, 0xa0, 0x6b, 0x9b, 0x24,
	0x79, 0xb0, 0xf3, 0xe7, 0x3a, 0xd8, 0x1c, 0x4a, 0x84, 0x60, 0x82, 0x1b, 0x61, 0x0d, 0x09, 0x85,
	0x26, 0x7e, 0xa3, 0x2f, 0x61, 0xe2, 0xc7, 0xae, 0xef, 0x6a, 0x35, 0xc1, 0x75, 0x31, 0xe2, 0xfa,
	0x86, 0x04, 0xde, 0xab, 0xc6, 0xbe, 0xda, 0x13, 0x81, 0xb2, 0x72, 0x1f, 0x4a, 0xd1, 0x6d, 0xe7,
	0x76, 0xe1, 0x84, 0x9c, 0x09, 0xb9, 0x2e, 0x1b, 0xfc, 0x27, 0x37, 0x81, 0x82, 0x56, 0x29, 0x56,
	0xd9, 0x78, 0x38, 0xf6, 0x4d, 0x41, 0x7f, 0x05, 0x68, 0xdb, 0xed, 0x7a, 0x67, 0x7b, 0x84, 0x05,
	0xb6, 0x39, 0xda, 0x40, 0x23, 0x98, 0xe0, 0x36, 0x59, 0x31, 0x12, 0xbf, 0x39, 0x8c, 0x9f, 0x8b,
	0x10, 0xfe, 0x49, 0x43, 0xfc, 0xd6, 0xff, 0x7b, 0x1c, 0xa6, 0x9f, 0x61, 0xc7, 0x21, 0x67, 0xe7,
	0xb1, 0xf9, 0x76, 0x42, 0xeb, 0xcb, 0x06, 0xba, 0x0d, 0x13, 0x1d, 0x42, 0x8f, 0xb5, 0x71, 0x71,
	0x24, 0xd7, 0x7a, 0xb2, 0xda, 0xe3, 0x59, 0xdf, 0x23, 0xf4, 0x58, 0x0a, 0xb8, 0xc0, 0x1d, 0x29,
	0x20, 0x13, 0x3f, 0xaf, 0x80, 0x4c, 0x7e, 0x58, 0x01, 0xc9, 0x1a, 0xa3, 0x62, 0xbf, 0x31, 0x4a,
	0x4b, 0xc6, 0xd4, 0xa5, 0x25, 0x63, 0xe5, 0x6b, 0x28, 0xc7, 0x9b, 0x7b, 0xa1, 0xfb, 0xf4, 0x47,
	0x50, 0xcb, 0x51, 0xa7, 0x9c, 0x05, 0xf6, 0xfd, 0x88, 0x05, 0xf6, 0x7d, 0x71, 0xea, 0xdc, 0x23,
	0x8d, 0x4f, 0x9d, 0x37, 0xf4, 0x7f, 0x29, 0xc0, 0x8c, 0xa2, 0x8f, 0x48, 0xbf, 0x03, 0x24, 0xfa,
	0xa4, 0x82, 0x6f, 0xcb, 0x4e, 0x65, 0x11, 0xaf, 0x0e, 0xd1, 0xfe, 0x46, 0x0e, 0x59, 0xf2, 0x16,
	0x8e, 0xa5, 0x6f, 0xe1, 0x3e, 0xd4, 0x04, 0xbe, 0xf2, 0x54, 0xa3, 0x71, 0xe4, 0x95, 0x59, 0x8d,
	0xc6, 0x51, 0xbd, 0xe9, 0x81, 0xf2, 0x08, 0xf5, 0xbf, 0x9b, 0x81, 0xe9, 0x67, 0x8e, 0x77, 0x88,
	0x1d, 0xb5, 0x8e, 0xcf, 0x61, 0x02, 0x07, 0xe6, 0xb1, 0x9a, 0x39, 0x8a, 0x38, 0xf6, 0x1c, 0x5b,
	0x43, 0xf4, 0xa3, 0x1b, 0x30, 0x6b, 0x8a, 0xf6, 0x3e, 0xee, 0x10, 0xea, 0x63, 0x33, 0xda, 0xe5,
	0x2c, 0x98, 0x1b, 0x73, 0x09, 0x7a, 0x85, 0x1d, 0xdb, 0x92, 0x5e, 0xe7, 0xb8, 0x34, 0xe6, 0x59,
	0x38, 0xfa, 0x16, 0xae, 0x9a, 0x9e, 0xcb, 0x02, 0xcf, 0x69, 0x38, 0xd8, 0x25, 0x4d, 0x62, 0x86,
	0x81, 0xcd, 0xce, 0x22, 0x1f, 0x60, 0x42, 0x90, 0x0d, 0x43, 0x41, 0x0d, 0xa8, 0x59, 0xd2, 0x53,
	0xd9, 0x4f, 0x1a, 0xc4, 0xe2, 0xb9, 0x34, 0x5e, 0x1e, 0x29, 0x3a, 0x86, 0x15, 0x6b, 0xa0, 0xe7,
	0x14, 0xdf, 0x5e, 0xc5, 0x78, 0x94, 0x8f, 0x65, 0x0c, 0xe1, 0x85, 0x6e, 0x42, 0xcd, 0xb2, 0x29,
	0x5f, 0x47, 0xc3, 0x73, 0x6c, 0xf3, 0x6c, 0xf3, 0x98, 0x98, 0x27, 0x54, 0x2b, 0x89, 0x55, 0xe7,
	0x75, 0xa1, 0x17, 0x30, 0x67, 0x65, 0xfc, 0x32, 0xe5, 0x36, 0x5c, 0xcb, 0xcc, 0x28, 0xe3, 0xb7,
	0x19, 0x7d, 0x74, 0xe8, 0x73, 0x98, 0x91, 0xb7, 0xec, 0x39, 0x71, 0x3a, 0x2d, 0x42, 0x99, 0xf0,
	0x22, 0x4a, 0x46, 0x06, 0x8a, 0x3e, 0x85, 0xaa, 0x84, 0xb4, 0x02, 0x6c, 0xda, 0x6e, 0x5b, 0xb8,
	0x09, 0x25, 0x23, 0x0d, 0x8c, 0xe2, 0x80, 0xe9, 0x5e, 0x1c, 0x70, 0x03, 0x66, 0x85, 0xce, 0x6c,
	0x84, 0x8e, 0x23, 0x17, 0x21, 0x6c, 0x73, 0xd9, 0xc8, 0x82, 0xf9, 0x4c, 0xc4, 0x5d, 0xed, 0x5d,
	0xad, 0x19, 0x81, 0x98, 0x81, 0xa2, 0xd7, 0x30, 0xef, 0x78, 0x26, 0x76, 0xb8, 0xda, 0x3b, 0x6c,
	0x12, 0xc6, 0xf8, 0x6c, 0x66, 0x85, 0x26, 0xfe, 0x55, 0xac, 0x89, 0x13, 0x97, 0xbb, 0xbe, 0x9b,
	0xc5, 0x96, 0x6a, 0xb9, 0x9f, 0x0b, 0xfa, 0x63, 0x80, 0x93, 0x6f, 0xa8, 0x12, 0x16, 0x6d, 0x2e,
	0xed, 0xd8, 0x7e, 0x17, 0x1e, 0x92, 0xc0, 0x25, 0x8c, 0xd0, 0x54, 0xc0, 0x68, 0x24, 0x48, 0xd0,
	0x3d, 0x98, 0x72, 0xbc, 0x76, 0x9b, 0xcf, 0x68, 0x3e, 0xe3, 0xc7, 0x89, 0x19, 0xed, 0xca, 0x4e,
	0x45, 0x19, 0xe1, 0xa2, 0x0d, 0xa8, 0x72, 0x1b, 0xb1, 0x7d, 0xea, 0x63, 0x97, 0x72, 0x49, 0x41,
	0x69, 0xe2, 0xbd, 0x64, 0xa7, 0x22, 0x4e, 0x53, 0x70, 0x5f, 0x90, 0x03, 0xf6, 0x09, 0x7b, 0xef,
	0x05, 0x27, 0x54, 0x99, 0xe5, 0x91, 0xbe, 0x60, 0x92, 0x86, 0x9f, 0x40, 0xc7, 0x73, 0x6d, 0xe6,
	0x71, 0x24, 0xee, 0xda, 0x68, 0x0b, 0x42, 0x8d, 0x67, 0xa0, 0x5c, 0x5b, 0x74, 0x98, 0x43, 0xb5,
	0xc5, 0xb4, 0xb6, 0xd8, 0x6b, 0xed, 0x36, 0x23, 0x6d, 0xc1, 0xfb, 0xd1, 0x6f, 0x60, 0xba, 0x13,
	0x3a, 0xcc, 0xde, 0x74, 0x42, 0xca, 0x48, 0xa0, 0x2d, 0x09, 0xfc, 0x95, 0x18, 0x3f, 0xd1, 0xa7,
	0xe8, 0x52, 0xf8, 0xdc, 0xa8, 0x78, 0x2e, 0xe9, 0xdd, 0x87, 0x65, 0x71, 0xe5, 0x52, 0x30, 0xf4,
	0x1a, 0x16, 0xbd, 0x90, 0x1d, 0x7a, 0xa1, 0x6b, 0xb5, 0x02, 0x7c, 0x74, 0x64, 0x9b, 0xea, 0x96,
	0x69, 0x62, 0xb0, 0x4f, 0xa2, 0xc1, 0x0e, 0xf2, 0x90, 0xd4, 0xa8, 0xf9, 0x1c, 0xb8, 0x60, 0xfa,
	0x3d, 0xb1, 0x7b, 0x8a, 0x6d, 0xe7, 0xc0, 0x27, 0xae, 0x76, 0x45, 0x0a, 0x66, 0x4e, 0x17, 0xbf,
	0xec, 0x12, 0xdc, 0x9b, 0xf3, 0x8a, 0xbc, 0xec, 0x19, 0x30, 0xfa, 0x0a, 0xe6, 0xfd, 0xc0, 0xf6,
	0xb8, 0x0e, 0xdb, 0x74, 0x30, 0xa5, 0xbc, 0x47, 0xbb, 0x2a, 0x70, 0xfb, 0x3b, 0x84, 0xfb, 0x19,
	0x78, 0xa7, 0x67, 0xda, 0xaa, 0x58, 0x54, 0xcf, 0xfd, 0xe4, 0xc0, 0xd8, 0xfd, 0xe4, 0x0d, 0x74,
	0x0f, 0xca, 0xe2, 0xc7, 0x8e, 0x6b, 0x33, 0xed, 0x63, 0x81, 0xbe, 0x9c, 0x42, 0xe7, 0x1d, 0x8a,
	0xa4, 0x87, 0x89, 0x3e, 0x81, 0x71, 0x6a, 0x51, 0xed, 0x9a, 0x20, 0x98, 0x8f, 0x7d, 0xcc, 0xad,
	0xe8, 0x40, 0x79, 0x6f, 0x14, 0xd3, 0x5f, 0xef, 0xc5, 0xf4, 0x75, 0x40, 0x8c, 0x38, 0xa4, 0x43,
	0x58, 0x90, 0x58, 0xf3, 0x9a, 0x8c, 0x7b, 0xfb, 0x7b, 0xd0, 0x57, 0x50, 0x64, 0x01, 0x36, 0x49,
	0xa0, 0xfd, 0x42, 0x8c, 0x14, 0x7b, 0xb3, 0x2d, 0x01, 0x8d, 0xe2, 0x1b, 0x89, 0x83, 0xd6, 0xa0,
	0xc2, 0x82, 0x90, 0xb2, 0x2d, 0xaf, 0x83, 0x6d, 0x57, 0xd3, 0x05, 0xdb, 0x24, 0x08, 0x2d, 0x41,
	0x31, 0xa4, 0x64, 0x6f, 0xb3, 0xa1, 0x7d, 0x22, 0x4e, 0x45, 0xb5, 0x56, 0xb6, 0x60, 0x29, 0x5f,
	0xea, 0x2f, 0xe4, 0x2f, 0xfc, 0x0a, 0x6a, 0x39, 0x62, 0xcb, 0x09, 0x1c, 0xd2, 0x25, 0x8e, 0x62,
	0x22, 0x1b, 0xfa, 0x7f, 0x55, 0x60, 0x21, 0xcf, 0x02, 0xff, 0x3f, 0x0a, 0x6b, 0x3f, 0x85, 0xaa,
	0x19, 0x52, 0xe6, 0x75, 0x9a, 0x32, 0x04, 0x10, 0xf6, 0xb3, 0x64, 0xa4, 0x81, 0x7c, 0xf9, 0x16,
	0x39, 0x0c, 0xdb, 0xc2, 0x08, 0x96, 0x0d, 0xd9, 0xe0, 0x27, 0x61, 0xc9, 0x63, 0x2a, 0x09, 0xb0,
	0x6a, 0x25, 0x9d, 0x1a, 0x48, 0x3b, 0x35, 0x5f, 0xcb, 0x50, 0xb9, 0x22, 0x34, 0xf7, 0x67, 0xc3,
	0x9c, 0x98, 0x4c, 0xac, 0xbc, 0x06, 0x15, 0x72, 0xca, 0x48, 0xe0, 0x62, 0x67, 0xa7, 0x41, 0xb5,
	0x69, 0x91, 0x8d, 0x4b, 0x82, 0xd0, 0xb5, 0x94, 0x1e, 0xaf, 0x8a, 0x71, 0x93, 0x6a, 0xfa, 0x06,
	0xcc, 0xf6, 0x5a, 0xcf, 0x19, 0xf3, 0xa9, 0xb0, 0x35, 0x25, 0x23, 0x0b, 0x4e, 0xc4, 0xe5, 0xb3,
	0xe7, 0x8f, 0xcb, 0x3f, 0x87, 0x19, 0xc7, 0xc3, 0xd6, 0x13, 0xec, 0x60, 0xd7, 0x24, 0xc1, 0x4e,
	0x43, 0x98, 0x92, 0xb2, 0x91, 0x81, 0xa2, 0x87, 0xa0, 0x25, 0x21, 0x4d, 0xe9, 0xf5, 0x62, 0xb7,
	0x4d, 0x78, 0xb0, 0xc6, 0x57, 0x35, 0xb0, 0x1f, 0x6d, 0x02, 0x4a, 0x19, 0x00, 0x11, 0x89, 0x6a,
	0x68, 0x70, 0x78, 0x9a, 0x83, 0xde, 0x97, 0x40, 0xa8, 0x7d, 0x90, 0x04, 0xc2, 0xc2, 0x4f, 0x92,
	0x40, 0x58, 0xfc, 0x79, 0xe3, 0xa3, 0xa5, 0x9f, 0x28, 0x81, 0xb0, 0x3c, 0x32, 0x81, 0x90, 0x0d,
	0xa5, 0xb4, 0x9c, 0x50, 0xea, 0x71, 0x32, 0x94, 0xba, 0x72, 0xae, 0xfd, 0x4e, 0xa4, 0x16, 0x6e,
	0x49, 0x65, 0xbf, 0x92, 0xf6, 0x6f, 0xd2, 0x92, 0xd7, 0xb4, 0x68, 0x52, 0xf5, 0xf7, 0x65, 0x23,
	0xae, 0xfe, 0xa1, 0xd9, 0x88, 0xd5, 0x3f, 0x38, 0x1b, 0xf1, 0x71, 0x22, 0x1b, 0x71, 0x57, 0x65,
	0x23, 0xa4, 0x01, 0x5b, 0xcb, 0x5f, 0xd3, 0x9b, 0xae, 0xef, 0x7e, 0x90, 0xc4, 0xc4, 0x0e, 0x2c,
	0x0f, 0xd8, 0xad, 0x8b, 0xa6, 0x12, 0xf4, 0x5d, 0xd0, 0x06, 0x4d, 0x72, 0x08, 0xaf, 0x25, 0x28,
	0xd2, 0xf0, 0xe8, 0xc8, 0x3e, 0x55, 0xcc, 0x54, 0x4b, 0x7f, 0x04, 0xd7, 0x7b, 0x6e, 0xea, 0xb6,
	0xdb, 0xdd, 0xb3, 0x4f, 0x49, 0xb0, 0x61, 0x61, 0x9f, 0x8d, 0x4e, 0xe2, 0xeb, 0xef, 0x61, 0x79,
	0x80, 0x8f, 0x3b, 0x64, 0x26, 0x5c, 0x19, 0xcb, 0x48, 0x41, 0xa8, 0x51, 0x19, 0xb8, 0x26, 0x41,
	0x1c, 0x43, 0xc5, 0x9d, 0xc2, 0xc9, 0x91, 0x49, 0xf1, 0x24, 0x48, 0x7f, 0x07, 0x68, 0xd7, 0xc3,
	0x56, 0xf3, 0x98, 0x58, 0x56, 0xcf, 0xcc, 0xfe, 0x12, 0xe6, 0x1c, 0xcc, 0x88, 0x6b, 0x9e, 0xb5,
	0x8e, 0x03, 0x42, 0x8f, 0x3d, 0xc7, 0x52, 0xa7, 0xd3, 0x07, 0xd7, 0xd7, 0x61, 0xa2, 0xe3, 0x59,
	0x04, 0x4d, 0x43, 0x69, 0x6b, 0xa7, 0xb9, 0xf1, 0x64, 0x77, 0x7b, 0x6b, 0xee, 0x23, 0xde, 0xda,
	0x3d, 0x78, 0xf6, 0xf6, 0x60, 0x7f, 0xf7, 0xf5, 0x5c, 0x01, 0x55, 0x60, 0x6a, 0x7b, 0xff, 0xe9,
	0x81, 0xb1, 0xb9, 0x3d, 0x37, 0xa6, 0x7f, 0x0e, 0xd0, 0x73, 0x57, 0x87, 0xec, 0xc9, 0x33, 0xa8,
	0xe5, 0x38, 0xdf, 0xc3, 0x4f, 0x26, 0xa4, 0x64, 0x67, 0xf7, 0x89, 0xda, 0x0a, 0xd5, 0xd2, 0x7f,
	0x37, 0x06, 0xb5, 0xe4, 0x69, 0x44, 0x3b, 0xbb, 0x07, 0xd5, 0x93, 0x78, 0xd3, 0xb9, 0x3d, 0x94,
	0x21, 0xf8, 0x17, 0xfd, 0x51, 0x47, 0xee, 0x71, 0x1a, 0x69, 0x6a, 0xb4, 0x05, 0xe0, 0x07, 0x5e,
	0x87, 0xb0, 0x63, 0x12, 0xca, 0xd3, 0x48, 0xa4, 0xa1, 0x1b, 0x71, 0x4f, 0x0e, 0xa3, 0x04, 0x1d,
	0xba, 0x07, 0x93, 0x94, 0x59, 0xb6, 0x27, 0x0e, 0x2b, 0xa1, 0x22, 0x9a, 0x1c, 0x98, 0x43, 0x2b,
	0xb1, 0xb9, 0xdd, 0x0b, 0x29, 0x89, 0xba, 0x8c, 0x2d, 0xaa, 0x42, 0xf7, 0x0c, 0x54, 0xff, 0x53,
	0xa8, 0x08, 0x26, 0x6a, 0x0b, 0x6e, 0x41, 0x51, 0xba, 0xc7, 0x6a, 0xed, 0x57, 0xe2, 0x00, 0x81,
	0x23, 0xa5, 0x3c, 0x75, 0x85, 0x88, 0x1e, 0x42, 0x39, 0xf6, 0x2e, 0xd5, 0x2a, 0x57, 0x53, 0x54,
	0xad, 0xa8, 0x37, 0x72, 0x75, 0x63, 0x74, 0xfd, 0xdf, 0xc6, 0x60, 0xbe, 0x8f, 0xf3, 0xff, 0xa6,
	0x97, 0x36, 0x71, 0xe9, 0xc7, 0x87, 0xc9, 0x01, 0x1a, 0xa6, 0x98, 0x4c, 0x56, 0xf6, 0x1b, 0xe8,
	0xa9, 0x4b, 0x19, 0xe8, 0xac, 0x5d, 0x2a, 0xe5, 0xbc, 0x37, 0xfd, 0x59, 0x11, 0x16, 0xf2, 0xf6,
	0x1f, 0x7d, 0x0d, 0x25, 0xac, 0x2e, 0x7e, 0x36, 0x3d, 0x96, 0x23, 0x15, 0x46, 0x8c, 0x9c, 0x7b,
	0x2e, 0x63, 0xe7, 0x3c, 0x97, 0xf1, 0x73, 0x9c, 0xcb, 0xc4, 0x4f, 0xf1, 0x28, 0x54, 0xcc, 0xf5,
	0x74, 0xa7, 0xd2, 0x9e, 0x6e, 0xde, 0x3e, 0x65, 0x3c, 0xdd, 0xf8, 0x40, 0x4b, 0xc9, 0x03, 0xfd,
	0x0d, 0x4c, 0x73, 0xb7, 0x90, 0x2a, 0x75, 0xa9, 0x52, 0x3f, 0x71, 0x58, 0xdd, 0xaf, 0x4a, 0x8d,
	0x14, 0xfe, 0xff, 0xa9, 0x67, 0xa3, 0xec, 0xa5, 0x9a, 0x1e, 0x95, 0x37, 0xae, 0x5e, 0xfe, 0x45,
	0xe5, 0x3e, 0x2c, 0x51, 0x42, 0xb9, 0x16, 0x8f, 0xfc, 0xb4, 0xe8, 0x42, 0x49, 0xe7, 0x7f, 0x40,
	0xef, 0xa5, 0xbd, 0x84, 0x3a, 0xa0, 0xfe, 0x14, 0xc7, 0x10, 0x5b, 0xf3, 0x8f, 0x05, 0x98, 0xdd,
	0xf7, 0x2c, 0xb2, 0xd1, 0x26, 0xee, 0xc8, 0xc7, 0x59, 0x74, 0x53, 0x5e, 0xaa, 0xb1, 0x73, 0x6d,
	0x7b, 0xfa, 0x36, 0x8d, 0x27, 0x6f, 0xd3, 0x07, 0x78, 0x8a, 0xd6, 0x9f, 0xc1, 0xd5, 0x21, 0xf9,
	0x15, 0xfd, 0x86, 0xb2, 0xce, 0x55, 0x28, 0x6f, 0xec, 0xee, 0x1e, 0x7c, 0xff, 0x76, 0x63, 0xff,
	0xf5, 0xdc, 0x47, 0x68, 0x1e, 0xaa, 0xc6, 0xf6, 0xb3, 0x9d, 0x66, 0xcb, 0x78, 0xad, 0x6c, 0xb4,
	0xfe, 0x57, 0x00, 0x95, 0x86, 0xed, 0x78, 0xa3, 0x97, 0x7f, 0x69, 0xbd, 0x30, 0x40, 0x17, 0x67,
	0x75, 0xc7, 0x44, 0xbe, 0xee, 0x18, 0xf5, 0xe2, 0x3e, 0x40, 0x07, 0x6b, 0x30, 0x45, 0x6d, 0x8b,
	0x98, 0x38, 0x88, 0x1e, 0x8c, 0x55, 0x93, 0xc7, 0xdc, 0x22, 0xdb, 0xd1, 0xc4, 0x1d, 0xdf, 0xe1,
	0xd2, 0xcc, 0x45, 0xbd, 0x60, 0xa4, 0x81, 0x69, 0x11, 0x28, 0x5f, 0x5e, 0x04, 0x72, 0xf2, 0xf7,
	0x90, 0x9f, 0xbf, 0x57, 0x3a, 0xb0, 0x72, 0x31, 0x1d, 0x98, 0xbd, 0x4c, 0xd3, 0x97, 0x50, 0x2d,
	0x26, 0x5c, 0x3f, 0x21, 0xc4, 0xc7, 0x8e, 0xdd, 0xe5, 0xbb, 0xde, 0x24, 0x41, 0x57, 0x08, 0x8f,
	0x4b, 0x4c, 0x3e, 0xdc, 0x46, 0x9b, 0x28, 0x25, 0x70, 0xa5, 0x2e, 0x8b, 0x80, 0xea, 0x51, 0x11,
	0x50, 0x7d, 0x4b, 0x15, 0x01, 0x19, 0xa3, 0x38, 0xc8, 0x14, 0xba, 0xef, 0x78, 0x67, 0x7c, 0x8b,
	0x64, 0x10, 0x2f, 0xb4, 0xc0, 0xe8, 0xc9, 0xf6, 0xd1, 0xf5, 0xa5, 0x5e, 0x67, 0x2f, 0x91, 0x7a,
	0x1d, 0x15, 0xfd, 0xce, 0xfd, 0xbc, 0xd1, 0xef, 0xfc, 0x87, 0x8d, 0x7e, 0x57, 0xa1, 0x2c, 0xef,
	0xd7, 0x1e, 0xf6, 0x45, 0x6e, 0xbb, 0x64, 0xf4, 0x00, 0xe8, 0x2e, 0x4c, 0xd9, 0x2a, 0x55, 0x53,
	0x4b, 0x9b, 0x32, 0xa1, 0x0a, 0xd2, 0xd9, 0xf6, 0x08, 0x35, 0x91, 0xfa, 0x5b, 0x48, 0xa6, 0xfe,
	0x50, 0x5d, 0xea, 0xc5, 0x45, 0x61, 0x6c, 0x57, 0x53, 0x9c, 0x72, 0x6d, 0x6c, 0xcf, 0xfb, 0x5c,
	0x4a, 0x7b, 0x9f, 0x82, 0x64, 0xb4, 0xf7, 0xb9, 0x9c, 0xf6, 0x3e, 0x05, 0xd5, 0x60, 0xef, 0xf3,
	0xd2, 0xc6, 0xe4, 0xaf, 0x0b, 0x80, 0xfa, 0xb7, 0x43, 0x3c, 0x9a, 0x48, 0x40, 0x94, 0xb3, 0x2b,
	0xa8, 0x47, 0x93, 0x14, 0x94, 0xab, 0x2e, 0x05, 0x11, 0x59, 0x65, 0x65, 0x02, 0x52, 0x30, 0xfd,
	0x01, 0x2c, 0xda, 0x31, 0x73, 0x16, 0x78, 0x8e, 0x43, 0x82, 0x3d, 0xae, 0xb7, 0x2b, 0x30, 0xb5,
	0xb5, 0xfd, 0x74, 0xe3, 0xe5, 0x6e, 0x6b, 0xee, 0x23, 0x04, 0x50, 0x6c, 0xb6, 0x8c, 0x9d, 0xcd,
	0xd6, 0x5c, 0x01, 0x4d, 0xc1, 0xf8, 0xc1, 0xd3, 0xa7, 0x73, 0x63, 0xfa, 0xaf, 0x61, 0xbe, 0x6f,
	0xbb, 0x86, 0x58, 0xba, 0x9b, 0xb0, 0x90, 0xb7, 0x4f, 0x43, 0x28, 0xde, 0x41, 0x25, 0x91, 0x2a,
	0x41, 0x08, 0x26, 0x5c, 0x1e, 0x4c, 0xca, 0xc5, 0x8a, 0xdf, 0xf1, 0x4b, 0xff, 0x58, 0xef, 0xa5,
	0x1f, 0xad, 0x40, 0x89, 0xeb, 0x96, 0x46, 0xaf, 0x02, 0x20, 0x6e, 0xa3, 0x6b, 0x00, 0xb2, 0xfe,
	0x4d, 0xf4, 0x4e, 0x88, 0xde, 0x04, 0x44, 0xff, 0xfd, 0x04, 0xcc, 0xf5, 0x22, 0xa6, 0x5e, 0x51,
	0x9d, 0x19, 0x10, 0xcc, 0x48, 0xaf, 0x27, 0xd2, 0xb9, 0x6a, 0xca, 0x03, 0xfb, 0x87, 0xbc, 0xef,
	0x66, 0x0d, 0xcb, 0x78, 0x8e, 0x61, 0x51, 0x4f, 0x6b, 0x13, 0x7d, 0x25, 0x76, 0x93, 0xbd, 0x74,
	0xfc, 0x2a, 0x37, 0x13, 0x8c, 0xb8, 0xe2, 0xb5, 0x55, 0x1a, 0xa0, 0x1e, 0xa0, 0x4f, 0x39, 0x4f,
	0x5d, 0x42, 0x39, 0x6f, 0xc0, 0x0c, 0x35, 0x03, 0xec, 0x13, 0x81, 0xd0, 0xc5, 0x8e, 0xb0, 0x57,
	0x43, 0x75, 0x71, 0x86, 0x00, 0xad, 0x41, 0xc5, 0xf4, 0x5c, 0x46, 0x4e, 0x59, 0x03, 0xb3, 0x63,
	0x61, 0xcd, 0xca, 0x46, 0x12, 0x94, 0x54, 0x08, 0x90, 0x56, 0x08, 0xfd, 0xf5, 0x9a, 0x3d, 0x85,
	0xf0, 0x00, 0xa6, 0x54, 0xb2, 0x48, 0x59, 0xad, 0xeb, 0xfd, 0x71, 0xaf, 0x12, 0x87, 0x88, 0x54,
	0xe1, 0xa3, 0xc7, 0x50, 0xa2, 0xea, 0x45, 0x59, 0x99, 0xac, 0xb5, 0x3c, 0x5a, 0x89, 0x11, 0x85,
	0x28, 0x11, 0x85, 0xfe, 0xbb, 0x02, 0xac, 0x0e, 0x0b, 0xad, 0x87, 0x78, 0x31, 0x07, 0xb0, 0xd8,
	0x91, 0xc5, 0x2d, 0xdb, 0xa7, 0xbe, 0x1d, 0x9c, 0x45, 0x9b, 0xa6, 0xdc, 0xba, 0x21, 0xbb, 0x9a,
	0x4f, 0xa7, 0xdf, 0x05, 0x6d, 0xd0, 0x8c, 0x87, 0x48, 0xd7, 0xdf, 0x16, 0x60, 0x79, 0xc0, 0x26,
	0xa1, 0x6f, 0xa1, 0x82, 0x13, 0x6e, 0x7e, 0xe1, 0x5c, 0x97, 0x26, 0x49, 0x82, 0x36, 0x13, 0x42,
	0x38, 0x96, 0xce, 0x6e, 0xf4, 0x0d, 0xba, 0xaf, 0x10, 0xa3, 0x4d, 0x8e, 0x08, 0xf5, 0x03, 0xb8,
	0x3e, 0x02, 0x79, 0x78, 0x61, 0x50, 0xac, 0x1a, 0xaa, 0xaa, 0x08, 0xe8, 0xef, 0xcb, 0x50, 0x49,
	0xbc, 0x9f, 0x71, 0x47, 0x0c, 0x9b, 0x26, 0xa1, 0x74, 0xd7, 0x6b, 0x3f, 0xb5, 0x9d, 0x48, 0xb7,
	0xa4, 0x81, 0xdc, 0x81, 0xea, 0x01, 0xbc, 0xa0, 0x83, 0xa3, 0x6a, 0xa3, 0x2c, 0x58, 0x3c, 0xa6,
	0x48, 0xc7, 0x5f, 0x3d, 0x5f, 0x49, 0x39, 0x4d, 0x03, 0xd1, 0x57, 0x30, 0x6f, 0x7a, 0x1d, 0xdf,
	0x73, 0xb9, 0x3b, 0xe1, 0xb5, 0x77, 0xc5, 0xbb, 0x92, 0x94, 0xdc, 0xfe, 0x0e, 0x25, 0x3a, 0x66,
	0x18, 0x04, 0xc4, 0x35, 0xcf, 0x84, 0x00, 0x57, 0x8d, 0x24, 0x88, 0xcb, 0xa7, 0xe5, 0x52, 0x83,
	0x1c, 0x05, 0x84, 0x1e, 0x1b, 0x98, 0x91, 0x73, 0xc8, 0x67, 0x9a, 0xa0, 0x57, 0x11, 0x20, 0x0a,
	0x64, 0xc3, 0x8e, 0x2f, 0x44, 0x34, 0xae, 0x08, 0x88, 0xa0, 0x68, 0x17, 0x6a, 0x24, 0x51, 0x9d,
	0x15, 0xd9, 0x9f, 0x8c, 0xc4, 0xf6, 0x17, 0x70, 0x19, 0x79, 0x64, 0xe8, 0x31, 0x54, 0x04, 0xb8,
	0xc9, 0x30, 0xa3, 0x96, 0x92, 0xe0, 0x61, 0x5c, 0x92, 0xe8, 0xe8, 0x26, 0xd4, 0xc8, 0xa9, 0xe9,
	0x84, 0x16, 0xd9, 0x71, 0x45, 0x18, 0x22, 0x9f, 0x43, 0x64, 0x1d, 0x42, 0x5e, 0x17, 0x3f, 0xc8,
	0x08, 0xdc, 0x50, 0x4f, 0x2e, 0xaa, 0x2e, 0x21, 0x03, 0xee, 0x79, 0xf4, 0x33, 0x49, 0x8f, 0xfe,
	0x26, 0xd4, 0x6c, 0xb7, 0x7f, 0xc4, 0x59, 0x39, 0x62, 0x4e, 0x97, 0xa8, 0x84, 0x70, 0xd3, 0x23,
	0xce, 0xa9, 0x4a, 0x88, 0x34, 0x18, 0xd5, 0x01, 0x9d, 0x84, 0x87, 0xa4, 0x6b, 0x07, 0x2c, 0x16,
	0x29, 0x59, 0xbe, 0x57, 0x36, 0x72, 0x7a, 0xb8, 0x95, 0x73, 0xa2, 0xbb, 0x23, 0x4b, 0xf4, 0xe2,
	0x36, 0xb7, 0x72, 0x7e, 0x60, 0x77, 0x6d, 0x87, 0xb4, 0x89, 0x25, 0xfc, 0xab, 0x92, 0x91, 0x80,
	0xa0, 0x27, 0xb0, 0x1a, 0x10, 0x6c, 0xd9, 0x2e, 0xa1, 0x74, 0xc7, 0xb5, 0x99, 0x8d, 0x9d, 0x2d,
	0xe2, 0xe0, 0xb3, 0x26, 0x31, 0x3d, 0xd7, 0xa2, 0xaa, 0x02, 0x60, 0x28, 0x0e, 0x0f, 0xac, 0xe3,
	0xfe, 0x06, 0x09, 0x6c, 0xcf, 0x8a, 0xa8, 0x17, 0x05, 0xf5, 0x80, 0x5e, 0xf4, 0x18, 0xae, 0xc4,
	0x3d, 0x4f, 0xb1, 0xed, 0x84, 0x01, 0xe9, 0xa5, 0x7a, 0x97, 0x04, 0xe9, 0x60, 0x04, 0xbe, 0x32,
	0xca, 0x30, 0x0b, 0xa9, 0x50, 0x2c, 0xcb, 0x02, 0x3d, 0x01, 0x49, 0xc7, 0x4c, 0xda, 0xe5, 0x6b,
	0xc5, 0xbf, 0x80, 0xf9, 0x58, 0xb6, 0xb7, 0x5d, 0xd3, 0x13, 0x39, 0x94, 0x12, 0x4c, 0xbc, 0x68,
	0x1e, 0xec, 0xcf, 0x7d, 0xc4, 0x7f, 0xb5, 0xb6, 0x7f, 0xdb, 0x9a, 0x2b, 0xe8, 0x5f, 0x00, 0xf0,
	0x70, 0x71, 0xc7, 0xfd, 0x81, 0x98, 0x4c, 0xa6, 0x9b, 0x13, 0x99, 0xe8, 0x38, 0x2f, 0x5d, 0xd0,
	0x6f, 0x46, 0xaf, 0xe0, 0xdc, 0x99, 0x7a, 0xb3, 0xd3, 0xf8, 0x6e, 0x87, 0x33, 0xaa, 0x42, 0x79,
	0x77, 0xe7, 0xd9, 0xf3, 0x56, 0xb3, 0xb5, 0xdd, 0x90, 0xe9, 0xea, 0xad, 0x8d, 0xd6, 0xc6, 0xd6,
	0xc1, 0xb3, 0xb9, 0x31, 0xfd, 0x0b, 0x98, 0xcd, 0x3c, 0xde, 0xf7, 0xae, 0x65, 0x21, 0xf9, 0x9c,
	0xb0, 0x09, 0xcb, 0x03, 0x0a, 0xb0, 0xb9, 0xbb, 0xc0, 0x23, 0x3a, 0xe5, 0x6d, 0xf2, 0x68, 0x6d,
	0x09, 0x8a, 0x1d, 0xd2, 0xf1, 0x54, 0x0a, 0xb5, 0x6c, 0xa8, 0x96, 0xfe, 0x17, 0x05, 0x28, 0xc7,
	0x4f, 0xff, 0x43, 0xd4, 0xaa, 0x06, 0x53, 0xa1, 0x45, 0x85, 0x15, 0x97, 0x0c, 0xa2, 0x26, 0x77,
	0x68, 0x42, 0x4a, 0xf6, 0xb9, 0x26, 0x74, 0x5e, 0xbc, 0x67, 0xaa, 0xf2, 0x2b, 0x05, 0xe3, 0xaa,
	0x2f, 0xa4, 0xa4, 0x15, 0x84, 0x94, 0xc7, 0x40, 0xec, 0xf8, 0x8c, 0x23, 0xca, 0x84, 0x71, 0x7f,
	0x87, 0xfe, 0x27, 0x30, 0x9d, 0x7c, 0x63, 0xe2, 0xae, 0x4e, 0x87, 0xfb, 0x45, 0x62, 0x74, 0xb9,
	0xa6, 0x1e, 0x20, 0xf6, 0x0f, 0xc7, 0x12, 0xfe, 0x21, 0xbf, 0x2f, 0x82, 0x43, 0xe2, 0x19, 0x22,
	0x01, 0xd1, 0xff, 0x72, 0x1c, 0x66, 0xce, 0x6b, 0x31, 0xfb, 0x3c, 0xb6, 0xb1, 0x61, 0xa9, 0x80,
	0x54, 0xbe, 0x45, 0x4c, 0xc3, 0x39, 0x6a, 0xda, 0x6d, 0x37, 0xae, 0x6d, 0x4b, 0x40, 0xb2, 0x45,
	0x0f, 0x93, 0xfd, 0x45, 0x0f, 0xdf, 0x42, 0xc9, 0x72, 0xe9, 0x26, 0xe1, 0xfa, 0xa6, 0x98, 0x2e,
	0x34, 0x4f, 0xcf, 0xbf, 0xbe, 0xa5, 0xd0, 0x64, 0xb8, 0x13, 0x53, 0x89, 0xe2, 0x3c, 0xe1, 0xa5,
	0xee, 0x11, 0x7a, 0xac, 0xea, 0x65, 0xa6, 0x54, 0x71, 0x5e, 0x06, 0xde, 0xe7, 0x35, 0x96, 0x2e,
	0xee, 0x35, 0xae, 0x3c, 0x82, 0x6a, 0x6a, 0x2a, 0x17, 0x8a, 0x7c, 0xfe, 0xa6, 0x00, 0xd5, 0x0f,
	0xed, 0x92, 0xe8, 0x30, 0x1d, 0xd5, 0x0b, 0x34, 0x7a, 0x8e, 0x41, 0x0a, 0x16, 0xdf, 0xa1, 0xf1,
	0x74, 0x8c, 0x91, 0x2d, 0x84, 0xd6, 0xff, 0x75, 0x12, 0x16, 0x9b, 0x32, 0x9b, 0x23, 0x45, 0xdf,
	0x1b, 0xed, 0xf7, 0x3d, 0x86, 0x2b, 0xf2, 0x67, 0x9c, 0x70, 0xa1, 0x4f, 0xce, 0x54, 0xcd, 0x9e,
	0x0a, 0x0e, 0x06, 0x23, 0x9c, 0x33, 0x91, 0x77, 0x99, 0xb4, 0xee, 0xf7, 0x50, 0x73, 0x49, 0x97,
	0xa8, 0x85, 0xc4, 0xac, 0x2a, 0x17, 0x49, 0x07, 0xe4, 0x71, 0x40, 0xaf, 0x61, 0x01, 0x3b, 0xef,
	0xf1, 0x19, 0xcd, 0x70, 0xbe, 0xd0, 0x67, 0x01, 0xb9, 0x2c, 0x46, 0xa6, 0x4e, 0xaa, 0x3f, 0x6f,
	0xea, 0x64, 0xe6, 0xa7, 0x2d, 0xac, 0x9e, 0xcd, 0x51, 0x34, 0x37, 0xa1, 0x16, 0x90, 0xf7, 0x81,
	0xcd, 0xc8, 0x86, 0xef, 0x3f, 0x6f, 0xb5, 0x1a, 0x8d, 0xc0, 0x3b, 0x24, 0xc2, 0xbb, 0x28, 0x19,
	0x79, 0x5d, 0x19, 0x25, 0x34, 0x9f, 0x55, 0x42, 0xfa, 0xf7, 0xb0, 0x3c, 0xe0, 0xad, 0x6f, 0xb8,
	0x4e, 0xf4, 0x42, 0xe6, 0x87, 0x6c, 0x83, 0xbe, 0xa0, 0x2a, 0x86, 0x29, 0x19, 0x29, 0x98, 0xfe,
	0x0f, 0x05, 0x98, 0x4e, 0xd6, 0x7a, 0xa1, 0x7b, 0x30, 0x65, 0x61, 0x86, 0x2d, 0xaf, 0x9d, 0x7d,
	0x17, 0x92, 0x68, 0x5b, 0xb2, 0x33, 0x8a, 0xd8, 0x14, 0x2e, 0x7a, 0x04, 0x65, 0xc7, 0x6e, 0x1f,
	0x33, 0xca, 0x88, 0xaf, 0x82, 0x8a, 0x8f, 0xd3, 0x84, 0xbb, 0xbc, 0xbb, 0xc9, 0x88, 0x1f, 0xe5,
	0x60, 0x62, 0x7c, 0x74, 0x1b, 0x8a, 0x3f, 0xda, 0xfe, 0x89, 0xca, 0x04, 0x27, 0xdc, 0x4c, 0x49,
	0xf9, 0x46, 0xf4, 0x45, 0x39, 0x1f, 0x89, 0xa9, 0xaf, 0x43, 0x2d, 0x67, 0x42, 0x7c, 0x37, 0xb0,
	0x65, 0x89, 0x50, 0x55, 0x2a, 0xb3, 0xa8, 0xa9, 0xff, 0x79, 0x01, 0x16, 0x73, 0x67, 0x32, 0x98,
	0x86, 0xeb, 0x7e, 0xe9, 0x6a, 0xb4, 0xbc, 0x13, 0xe2, 0x2a, 0x55, 0x98, 0x04, 0xf1, 0x83, 0x33,
	0x39, 0x4f, 0x69, 0xf7, 0x94, 0x11, 0xeb, 0x41, 0x44, 0x61, 0x00, 0xb7, 0x01, 0x44, 0x59, 0x16,
	0xd5, 0xd2, 0xeb, 0x80, 0xfa, 0x17, 0x37, 0x64, 0xf6, 0xff, 0x3e, 0x06, 0x55, 0x55, 0xd4, 0x3b,
	0xf2, 0xdc, 0xef, 0xf7, 0xc2, 0xf5, 0xcc, 0x53, 0xac, 0xe2, 0x30, 0x20, 0x60, 0xbf, 0x03, 0xc5,
	0x1f, 0x30, 0x69, 0x93, 0x40, 0x1d, 0xc3, 0xd5, 0x0c, 0xd9, 0x0b, 0xd1, 0x19, 0x9d, 0x83, 0x44,
	0xfd, 0x20, 0x5f, 0xce, 0xad, 0x40, 0xc9, 0x0f, 0xbc, 0xae, 0x6d, 0x91, 0x40, 0xd9, 0xd7, 0xb8,
	0x8d, 0xd6, 0x7b, 0x59, 0x84, 0x62, 0xfa, 0xcb, 0x96, 0x01, 0xb9, 0x83, 0x3b, 0xf1, 0x65, 0x9a,
	0xca, 0x5d, 0x45, 0xee, 0x6d, 0xba, 0x09, 0x0b, 0x79, 0x7b, 0x33, 0x24, 0x44, 0x67, 0xf2, 0xfe,
	0x65, 0xb6, 0x25, 0xca, 0x0a, 0x15, 0xfa, 0xb2, 0x42, 0x63, 0xbd, 0xac, 0xd0, 0x83, 0xd8, 0xcd,
	0x93, 0xfb, 0xfc, 0x8b, 0xdc, 0x7d, 0xde, 0x13, 0x28, 0xd1, 0x3c, 0x95, 0x27, 0xf8, 0x10, 0xae,
	0x0c, 0x44, 0x42, 0x1f, 0x03, 0x74, 0xf0, 0xe9, 0x5b, 0xe1, 0xca, 0x52, 0xf5, 0xc1, 0x6b, 0xb9,
	0x83, 0x4f, 0xc5, 0x45, 0xa3, 0xfa, 0x3f, 0x8d, 0xc5, 0x53, 0x4e, 0x5d, 0xba, 0xf3, 0x4c, 0x59,
	0x94, 0xc7, 0x7a, 0x87, 0xa4, 0xc9, 0x70, 0xc0, 0x42, 0x5f, 0x44, 0x1b, 0x2a, 0x2b, 0xd6, 0xdf,
	0xc1, 0x7d, 0xc1, 0x77, 0x21, 0x09, 0xce, 0xe2, 0x44, 0x5e, 0xd5, 0xe8, 0x01, 0x3e, 0xd4, 0x37,
	0xa3, 0x5c, 0xbd, 0xfd, 0x80, 0xbb, 0xf8, 0xc0, 0x67, 0xf4, 0x39, 0xc1, 0xbe, 0x8a, 0xd2, 0x53,
	0x30, 0x7e, 0xb3, 0x3a, 0xf8, 0xb4, 0xe9, 0x63, 0xf5, 0xca, 0x5e, 0x35, 0xe2, 0x36, 0xba, 0x03,
	0x13, 0xfc, 0x16, 0x2a, 0x07, 0xea, 0x7a, 0xee, 0x35, 0xd9, 0xf7, 0xac, 0xe8, 0x82, 0x09, 0x64,
	0xfd, 0xd7, 0xb0, 0x3c, 0x00, 0x81, 0xfb, 0x22, 0xa6, 0x1f, 0x46, 0x1b, 0x2f, 0x7e, 0xeb, 0xff,
	0x3c, 0x09, 0xc5, 0x57, 0x82, 0x2f, 0x7a, 0x04, 0x15, 0xae, 0x15, 0x3a, 0xf2, 0x0b, 0xde, 0x6c,
	0x69, 0x45, 0xdf, 0xc7, 0xbd, 0x46, 0x12, 0x1b, 0xd5, 0xa1, 0x2c, 0xaa, 0xee, 0xdf, 0x9a, 0xae,
	0xad, 0x84, 0x3a, 0x2e, 0x0a, 0x8e, 0xbf, 0x4c, 0x36, 0x4a, 0x02, 0x67, 0xd3, 0xb5, 0xd1, 0x03,
	0x98, 0x16, 0xbf, 0xf9, 0x5e, 0x5a, 0x2e, 0x55, 0x17, 0x2d, 0x16, 0x9d, 0xd4, 0xa7, 0xb6, 0x46,
	0x0a, 0x15, 0x7d, 0x05, 0xc5, 0xb6, 0xf8, 0x6e, 0x4a, 0x89, 0xf2, 0x42, 0xde, 0xd7, 0x54, 0x86,
	0xc2, 0x41, 0xb7, 0xa1, 0xa4, 0x2a, 0x87, 0xa2, 0xb3, 0x5c, 0xca, 0x54, 0x64, 0xc6, 0x25, 0x04,
	0x11, 0x9e, 0x18, 0x41, 0x94, 0xf1, 0x2a, 0x89, 0x5e, 0xc8, 0xfb, 0x4a, 0xc0, 0x50, 0x38, 0xe8,
	0x4b, 0x98, 0xec, 0x70, 0xab, 0xa7, 0xc4, 0xb9, 0x96, 0x7a, 0xae, 0x8f, 0xea, 0x5d, 0x04, 0x06,
	0xba, 0x07, 0x65, 0x7e, 0x48, 0xb8, 0x4d, 0x54, 0x39, 0x44, 0xa2, 0xd6, 0x3a, 0xf3, 0x90, 0x6b,
	0xf4, 0x30, 0x45, 0x2d, 0xa0, 0xed, 0x78, 0x4c, 0x3d, 0xe4, 0xd5, 0x72, 0xde, 0x28, 0x0c, 0x89,
	0x81, 0xbe, 0x49, 0x95, 0xf3, 0x48, 0x8f, 0x4e, 0xeb, 0x4f, 0x9e, 0xe5, 0x94, 0xf0, 0xdc, 0x4e,
	0xa4, 0x34, 0x2b, 0xe9, 0x8d, 0x1a, 0x94, 0xc8, 0x44, 0x2f, 0x61, 0x89, 0xa6, 0x1d, 0xd9, 0xef,
	0xc9, 0xe1, 0xb1, 0xe7, 0x9d, 0x28, 0x37, 0x2d, 0xb6, 0xb0, 0xb9, 0xee, 0xae, 0x31, 0x80, 0x98,
	0xab, 0x54, 0xa6, 0x3e, 0x1a, 0xa9, 0xa6, 0xef, 0x45, 0xca, 0xc2, 0x18, 0x11, 0x96, 0xae, 0xc1,
	0x52, 0xbe, 0x1e, 0xd7, 0xaf, 0xc3, 0xc7, 0x43, 0x1d, 0x2a, 0x7d, 0x03, 0xaa, 0xa9, 0x2f, 0x10,
	0x2f, 0x5e, 0x43, 0xf7, 0x04, 0xde, 0x94, 0xa2, 0x7f, 0x44, 0x70, 0x58, 0x14, 0xe9, 0xb2, 0x3b,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x83, 0x2d, 0xfa, 0xaa, 0x40, 0x00, 0x00,
}